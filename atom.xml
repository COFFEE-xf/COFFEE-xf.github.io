<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-06-21T10:05:41.254Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>谢斐</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计算机网络 笔记汇总页</title>
    <link href="http://example.com/2025/06/21/guide04/"/>
    <id>http://example.com/2025/06/21/guide04/</id>
    <published>2025-06-21T09:56:53.000Z</published>
    <updated>2025-06-21T10:05:41.254Z</updated>
    
    <content type="html"><![CDATA[<style>.center {  width: auto;  display: table;  margin-left: auto;  margin-right: auto;}</style><h1>计算机网络 笔记汇总页</h1><h2 id="计算机三级网络技术">计算机三级网络技术</h2><ul><li><a href="https://loquattree.xyz/2025/03/13/note06/">计算机三级网络技术相关知识点整理</a></li></ul><h2 id="PacketTracer实验笔记">PacketTracer实验笔记</h2><ul><li><a href="https://loquattree.xyz/2025/05/15/note42/">计算机网络实验 配置RIPv2动态网络</a></li><li><a href="https://loquattree.xyz/2025/05/15/note43/">计算机网络实验 配置IPv4静态路由和缺省路由</a></li><li><a href="https://loquattree.xyz/2025/05/22/note56/">计算机网络实验 配置基于802.1Q trunk的vlan间路由</a></li></ul>]]></content>
    
    
    <summary type="html">计算机网络学习笔记</summary>
    
    
    
    <category term="计算机网络" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>疑难杂症解决方案汇总页</title>
    <link href="http://example.com/2025/06/21/guide03/"/>
    <id>http://example.com/2025/06/21/guide03/</id>
    <published>2025-06-21T08:30:12.000Z</published>
    <updated>2025-06-21T08:31:19.009Z</updated>
    
    <content type="html"><![CDATA[<style>.center {  width: auto;  display: table;  margin-left: auto;  margin-right: auto;}</style><h1>算法学习 笔记汇总页</h1>]]></content>
    
    
    <summary type="html">疑难杂症解决方案</summary>
    
    
    
    <category term="疑难杂症解决方案" scheme="http://example.com/categories/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
    
  </entry>
  
  <entry>
    <title>算法学习 笔记汇总页</title>
    <link href="http://example.com/2025/06/21/guide02/"/>
    <id>http://example.com/2025/06/21/guide02/</id>
    <published>2025-06-21T08:28:08.000Z</published>
    <updated>2025-06-21T08:31:01.953Z</updated>
    
    <content type="html"><![CDATA[<style>.center {  width: auto;  display: table;  margin-left: auto;  margin-right: auto;}</style><h1>算法学习 笔记汇总页</h1>]]></content>
    
    
    <summary type="html">算法学习笔记</summary>
    
    
    
    <category term="算法相关" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E7%9B%B8%E5%85%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>机器学习基础</title>
    <link href="http://example.com/2025/06/21/ml01/"/>
    <id>http://example.com/2025/06/21/ml01/</id>
    <published>2025-06-21T07:47:57.000Z</published>
    <updated>2025-06-21T07:52:49.355Z</updated>
    
    <content type="html"><![CDATA[<style>.center {  width: auto;  display: table;  margin-left: auto;  margin-right: auto;}</style><h1>机器学习基础</h1><h2 id="一、卷积神经网络-Convolutional-Neural-Network-CNN">一、卷积神经网络 (Convolutional Neural Network, CNN)</h2><h2 id="二、循环神经网络-Recurrent-Neural-Network-RNN">二、循环神经网络 (Recurrent Neural Network, RNN)</h2><h2 id="三、长短期记忆网络-Long-Short-Term-Memory-LSTM">三、长短期记忆网络 (Long Short-Term Memory, LSTM)</h2><h2 id="四、图神经网络-Graph-Neural-Network-GNN">四、图神经网络 (Graph Neural Network, GNN)</h2>]]></content>
    
    
    <summary type="html">CNN, RNN, LSTM, GNN等基础概念的学习</summary>
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="机器学习" scheme="http://example.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络实验 配置基于802.1Q trunk的vlan间路由</title>
    <link href="http://example.com/2025/05/22/note56/"/>
    <id>http://example.com/2025/05/22/note56/</id>
    <published>2025-05-22T08:01:34.000Z</published>
    <updated>2025-06-21T10:05:37.887Z</updated>
    
    <content type="html"><![CDATA[<style>.center {  width: auto;  display: table;  margin-left: auto;  margin-right: auto;}</style><h1>计算机网络实验 配置基于802.1Q trunk的vlan间路由</h1><h2 id="一、技术文档">一、技术文档</h2><div class="center"><style>.rtvqeqhpnapg{}</style><style>.fdllmhcmzgwr{}</style><style>.ayrjjtobtfrv{}</style><style>.ehsdfopndamt{}</style><style>.lnacuhxslqhs{}</style><style>.qxewmgxkisnu{}</style><style>.fbgolhkkgwxi{}</style></div><h2 id="二、实验要点">二、实验要点</h2><p>  ​​802.1Q​​是一款VLAN标记协议，可以在以太网帧中插入VLAN标识信息，使得交换机能够识别和区分不同VLAN的流量。这样一来就可以允许一条物理链路中传输多个VLAN的流量。也能实现跨VLAN路由，因为路由器能够通过子接口解析802.1Q标签。</p><h2 id="三、命令实现">三、命令实现</h2><h3 id="Part-1-基础硬件设置配置">Part 1 基础硬件设置配置</h3><h4 id="Step-1-按拓扑图连接网络">Step 1 按拓扑图连接网络</h4><h4 id="Step-2-配置电脑">Step 2 配置电脑</h4><h4 id="Step-3-根据需要初始化并重新加载路由器和交换机">Step 3 根据需要初始化并重新加载路由器和交换机</h4><h4 id="Step-4-配置交换机">Step 4 配置交换机</h4><p>执行以下命令，以S1为例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs text"><br>Switch&gt;<br>Switch&gt;enable<br>Switch#conf t<br>Enter configuration commands, one per line.  End with CNTL/Z.<br><br>Switch(config)#no ip domain-lookup<br>Switch(config)#service password-encryption<br>Switch(config)#enable secret class<br><br>Switch(config)#banner motd # Unauthorized access is strictly prohibited. #<br><br>Switch(config)#line con 0<br>Switch(config-line)#password cisco<br>Switch(config-line)#login<br>Switch(config-line)#logging synchronous<br><br>Switch(config-line)#line vty 0 15<br>Switch(config-line)#password cisco<br>Switch(config-line)#login<br>Switch(config-line)#exit<br><br>Switch(config)#<br>Switch(config)#hostname S1<br><br>S1(config)#interface vlan 1<br>S1(config-if)#ip address 192.168.1.11 255.255.255.0<br>S1(config-if)#no shut<br><br>S1(config-if)#<br>%LINK-5-CHANGED: Interface Vlan1, changed state to up<br><br>%LINEPROTO-5-UPDOWN: Line protocol on Interface Vlan1, changed state to up<br><br>S1(config-if)#ip default-gateway 192.168.1.1<br><br>&lt;!-- 先禁用交换机上所有端口（提示信息已省略） --&gt;<br>S1(config)#interface range f0/1 - 24<br>S1(config-if-range)#shutdown<br><br>&lt;!-- 再打开所有要使用到的端口（提示信息已省略） --&gt;<br><br>S1(config)#interface f0/1<br>S1(config-if)#no shut<br><br>S1(config-if)#interface f0/6<br>S1(config-if)#no shut<br><br>S1(config-if)#interface f0/5<br>S1(config-if)#no shut<br><br>S1(config-if)#end<br><br>S1#wr<br>Building configuration...<br>[OK]<br>S1#<br><br></code></pre></td></tr></table></figure><h4 id="Step-5-配置路由器">Step 5 配置路由器</h4><p>执行以下命令：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs text">Router&gt;enable<br>Router#conf t<br>Enter configuration commands, one per line.  End with CNTL/Z.<br><br>Router(config)#no ip domain-lookup<br>Router(config)#hostname R1<br>R1(config)#service password-encryption<br>R1(config)#enable secret class<br>R1(config)#banner motd # Unauthorized access is strictly prohibited. #<br>R1(config)#<br><br>R1(config)#line con 0<br>R1(config-line)#password cisco<br>R1(config-line)#login<br>R1(config-line)#logging synchronous<br><br>R1(config-line)#line vty 0 4<br>R1(config-line)#password cisco<br>R1(config-line)#login<br>R1(config-line)#exit<br><br>&lt;!-- 配置回环接口 --&gt;<br>R1(config)#interface loopback 0<br><br>R1(config-if)#<br>%LINK-5-CHANGED: Interface Loopback0, changed state to up<br><br>%LINEPROTO-5-UPDOWN: Line protocol on Interface Loopback0, changed state to up<br><br>R1(config-if)#ip address 209.165.200.225 255.255.255.224<br>R1(config-if)#end<br>R1#<br>%SYS-5-CONFIG_I: Configured from console by console<br><br>R1#wr<br>Building configuration...<br>[OK]<br>R1#<br></code></pre></td></tr></table></figure><h3 id="Part-2-配置交换机vlan和trunk">Part 2 配置交换机vlan和trunk</h3><p>在交换机中执行以下命令，以S1为例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs text">S1&gt;enable<br>Password: <br>S1#conf t<br>Enter configuration commands, one per line.  End with CNTL/Z.<br><br>&lt;!-- 创建VLAN并命名 --&gt;<br>S1(config)#vlan 10<br>S1(config-vlan)#name Students<br>S1(config-vlan)#vlan 20<br>S1(config-vlan)#name Faculty<br>S1(config-vlan)#exit<br><br>&lt;!-- 配置Trunk接口 --&gt;<br>&lt;!-- Trunk 接口允许传输多个 VLAN 的流量 --&gt;<br>&lt;!-- 通常用于连接 ​​其他交换机、路由器或服务器​​（如跨交换机的VLAN 扩展）。 --&gt;<br>S1(config)#interface f0/1<br>S1(config-if)#switchport trunk native vlan 1        &lt;!-- 配置Trunk端口的Native VLAN，该VLAN的流量在链路上​​不携带802.1Q标签 --&gt;<br>S1(config-if)#switchport trunk allowed vlan 1,10,20 &lt;!-- 限制该 Trunk端口​​仅允许VLAN 1、10 和20的流量通过--&gt;<br>S1(config-if)#switchport mode trunk<br><br>S1(config-if)#interface f0/5<br>S1(config-if)#switchport trunk native vlan 1<br>S1(config-if)#switchport trunk allowed vlan 1,10,20<br>S1(config-if)#switch mode trunk<br><br>&lt;!-- 配置Access接口 --&gt;<br>&lt;!-- Access 接口仅属于一个 VLAN，通常用于连接​​终端设备​​（如电脑、打印机）。 --&gt;<br>S1(config-if)#interface f0/6<br>S1(config-if)#switchport mode access<br>S1(config-if)#switchport access vlan 10<br>&lt;!-- 为该接口配置安全设置 --&gt;<br>S1(config-if)#switchport port-security<br>S1(config-if)#switchport port-security maximum 2<br>S1(config-if)#switchport port-security mac-address sticky<br><br>&lt;!-- S1(config-if)#switchport port-security mac-address sticky 00E0.A3A2.8124 --&gt;<br><br>S1(config-if)#end<br>S1#<br>%SYS-5-CONFIG_I: Configured from console by console<br><br>S1#wr<br>Building configuration...<br>[OK]<br>S1#<br></code></pre></td></tr></table></figure><h3 id="Part-3-配置基于trunk的vlan间路由">Part 3 配置基于trunk的vlan间路由</h3><p>在R1上执行以下命令以完成单臂路由配置：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;!-- 创建子接口并绑定VLAN --&gt;<br>R1(config)# interface g0/1.1 <br>R1(config-subif)# encapsulation dot1Q 1 &lt;!-- 绑定到VLAN 1 --&gt;<br>R1(config-subif)# ip address 192.168.1.1 255.255.255.0 <br><br>R1(config-subif)# interface g0/1.10 <br>R1(config-subif)# encapsulation dot1Q 10 &lt;!-- 绑定到VLAN 10 --&gt;<br>R1(config-subif)# ip address 192.168.10.1 255.255.255.0 <br><br>R1(config-subif)# interface g0/1.20 <br>R1(config-subif)# encapsulation dot1Q 20 &lt;!-- 绑定到VLAN 20 --&gt;<br>R1(config-subif)# ip address 192.168.20.1 255.255.255.0 <br>R1(config-subif)# exit <br><br>&lt;!-- 如果有一个子端口分配有Native VLAN的需求的话需要多加一个属性 --&gt;<br>&lt;!-- 例如：encapsulation dot1Q 99 native --&gt;<br><br>&lt;!-- 激活物理接口 g0/1，使其能够收发流量 --&gt;<br>R1(config)# interface g0/1 <br>R1(config-if)# no shutdown<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">计算机网络实验命令行记录</summary>
    
    
    
    <category term="计算机网络" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="实验" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>软件设计师 知识点拾遗 网络与信息安全基础知识</title>
    <link href="http://example.com/2025/05/21/note55/"/>
    <id>http://example.com/2025/05/21/note55/</id>
    <published>2025-05-21T07:03:54.000Z</published>
    <updated>2025-05-23T07:31:33.904Z</updated>
    
    <content type="html"><![CDATA[<style>.center {  width: auto;  display: table;  margin-left: auto;  margin-right: auto;}</style><h1>软件设计师 知识点拾遗 网络与信息安全基础知识</h1><div class="center"><style>.mmfemohsujfj{}</style><img src="/2025/05/21/note55/note55_pic04.png" class="mmfemohsujfj"></div><br><hr><hr><ol><li>2017年上半年第13题</li></ol><div class="center"><style>.lqcmcyzkeqwd{}</style><img src="/2025/05/21/note55/note55_pic01.png" class="lqcmcyzkeqwd"></div><p>  取样指每隔一定时间间隔，取模拟信号的当前值作为样本，该样本代表了模信号在某一时刻的瞬间值。经过一系列的取样，取得连续的样本可以用来代替模拟信号在某一区间随时间变化的值。那么究竟以什么样频率取样，就可以从取样脉冲信号中无失真地恢复出原来的信号?尼奎斯特取样定理认为：<strong>如果取样速率大于模拟信号最高频率的2倍，则可以用得到的样本中恢复原来的模拟信号</strong>。</p><hr><ol start="2"><li>2017年上半年第14题 &amp;&amp; 2016年上半年第14题</li></ol><div class="center"><style>.gmymfibzahdi{}</style><img src="/2025/05/21/note55/note55_pic02.png" class="gmymfibzahdi"><style>.esyzwcqxgtzc{}</style><img src="/2025/05/21/note55/note55_pic10.png" class="esyzwcqxgtzc"></div><p>  像素总数 = （物理尺寸 × 分辨率）的乘积。例如，3英寸×4英寸的图片以300DPI扫描时，像素数=3×300（宽）×4×300（高）=900×1200像素。<strong>简言之，​​每英寸分辨率×对应方向的尺寸​​，分别计算宽高即可得到像素尺寸</strong>。<strong>此外，字节的多少大概是像素的八分之一</strong>。</p><hr><ol start="3"><li>2017年上半年第66题</li></ol><div class="center"><style>.stlpnpoynwdp{}</style><img src="/2025/05/21/note55/note55_pic03.png" class="stlpnpoynwdp"></div><p>  域名查询记录顺序为：</p><ul><li><strong>本地DNS缓存</strong></li><li>HOSTS表（位于PC中的一个纯文本映射文件）</li><li>本地DNS服务器</li><li>根域名服务器</li><li>顶级域名服务器</li><li>权限域名服务器</li></ul><hr><ol start="4"><li>2017年上半年第70题</li></ol><div class="center"><style>.ezytoexphmki{}</style><img src="/2025/05/21/note55/note55_pic05.png" class="ezytoexphmki"><table><thead><tr><th>选项</th><th>路由类型</th><th>动态更新性</th><th>特点</th></tr></thead><tbody><tr><td>静态路由</td><td>静态配置</td><td>不更新</td><td>管理员手动配置，不随网络变化调整</td></tr><tr><td>洪泛式</td><td>特殊策略</td><td>不更新</td><td>向所有路径广播，无智能路由选择</td></tr><tr><td>随机路由</td><td>随机选择</td><td>不更新</td><td>随机选择路径，不考虑网络状态</td></tr><tr><td>自适应路由</td><td>动态路由</td><td><strong>持续更新</strong></td><td>实时监测网络状态（如延迟、拥塞）并动态调整，典型协议：OSPF、RIP、BGP</td></tr></tbody></table></div><hr><ol start="5"><li>2016年下半年第9题</li></ol><div class="center"><style>.ovgjkdstglgy{}</style><img src="/2025/05/21/note55/note55_pic06.png" class="ovgjkdstglgy"></div><p>  这里主要可以来区分一下网络安全和系统安全：</p><ul><li>网络安全：保护网络基础设施和数据传输过程的安全，防止网络层面的攻击或滥用。入侵检测和流量控制就是网络安全方面的内容。</li><li>系统安全：关注计算机系统内部的安全防护，确保操作系统、应用程序和数据免受内部或外部的破坏、篡改或未授权访问。<strong>漏洞发现与补丁管理就属于系统安全的核心措施</strong>，通过识别系统漏洞并及时修复，直接提升系统自身的安全性。</li></ul><hr><ol start="6"><li>2016年下半年第66题和67题</li></ol><div class="center"><style>.guilypqyxdvc{}</style><img src="/2025/05/21/note55/note55_pic07.png" class="guilypqyxdvc"></div><p>  ARP和ICMP是网络层协议，X.25是数据链路层协议，<strong>只有SNMP是应用层协议</strong>。<strong>SNMP协议的报文是封装在UDP协议中传送</strong>。</p><hr><ol start="7"><li>2016年下半年第69题</li></ol><div class="center"><style>.tkyuythxxwtf{}</style><img src="/2025/05/21/note55/note55_pic08.png" class="tkyuythxxwtf"></div><p>  对于多种不同的路由协议到一个目的地的路由信息，路由器首先<strong>根据管理距离选择相信哪一个协议</strong>。</p><hr><ol start="8"><li>2015年下半年第7题</li></ol><div class="center"><style>.qkoqvbbuxwbm{}</style><img src="/2025/05/21/note55/note55_pic12.png" class="qkoqvbbuxwbm"><table><thead><tr><th><strong>对比维度</strong></th><th><strong>主动攻击（Active Attack）</strong></th><th><strong>被动攻击（Passive Attack）</strong></th></tr></thead><tbody><tr><td><strong>定义</strong></td><td>直接干预通信或系统，篡改/伪造/破坏数据</td><td>隐蔽监听通信，窃取数据但不修改</td></tr><tr><td><strong>攻击目标</strong></td><td>数据完整性、系统可用性、身份真实性</td><td>数据机密性</td></tr><tr><td><strong>典型手段</strong></td><td>- 中间人攻击<br>- DoS/DDoS<br>- SQL注入</td><td>- 网络嗅探<br>- <strong>流量分析</strong><br>- 窃听</td></tr><tr><td><strong>可检测性</strong></td><td>较易被发现（产生异常流量/行为）</td><td>极难检测（无直接痕迹）</td></tr><tr><td><strong>防御措施</strong></td><td>- 入侵检测系统（IDS）<br>- 数字签名<br>- WAF</td><td>- 端到端加密<br>- VPN<br>- 流量混淆</td></tr><tr><td><strong>攻击影响</strong></td><td>直接造成数据损坏/服务中断</td><td>导致信息泄露，无直接破坏</td></tr><tr><td><strong>示例场景</strong></td><td>篡改网页内容、伪造银行交易</td><td>窃取未加密的聊天记录</td></tr></tbody></table></div><hr><ol start="9"><li>2015年下半年第13题</li></ol><div class="center"><style>.ucntjioludyi{}</style><img src="/2025/05/21/note55/note55_pic13.png" class="ucntjioludyi"></div><p>  图像颜色数n与颜色深度b的关系为n=<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>b</mi></msup></mrow><annotation encoding="application/x-tex">2^b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span></span></span></span></span></span></span>，本题中的颜色深度为 8，故<strong>可表示的颜色数为2的8次方即256种</strong>。</p><hr><ol start="10"><li>2015年下半年第69题</li></ol><div class="center"><style>.xctofmlxnyod{}</style><img src="/2025/05/21/note55/note55_pic14.png" class="xctofmlxnyod"></div><ul><li>远程网络路由：通常使用标准子网掩码（如255.255.255.0），覆盖整个远程网络，非单个主机。</li><li>静态路由：由管理员手动配置，掩码取决于目标网络（可能是任意值，不固定为255.255.255.255）。</li><li>默认路由：目标地址为0.0.0.0/0，掩码为0.0.0.0，表示“匹配所有未明确指定的流量”。</li><li>主机路由：针对​​单一主机IP​​的路由，<strong>掩码必须为255.255.255.255</strong>。</li></ul><hr><ol start="11"><li>2015年上半年第67题</li></ol><div class="center"><style>.ljjkurpbhbli{}</style><img src="/2025/05/21/note55/note55_pic16.png" class="ljjkurpbhbli"></div><p>  VLAN的主要作用是​​逻辑划分广播域​​，将物理网络划分为多个虚拟子网，实现更灵活的网络管理：</p><ul><li>A选项：<strong>VLAN的核心优势就是通过软件配置实现逻辑网段划分，无需更改物理布线</strong>。</li><li>B选项：冲突域由交换机端口决定（每个端口是一个冲突域），与VLAN无关。</li><li>C选项：VLAN不影响冲突域大小，冲突域取决于物理层设备。</li><li>D选项：VLAN是​​增加广播域数量​​（将一个广播域划分为多个），而非减少。</li></ul><hr><ol start="12"><li>2014年下半年第7题</li></ol><div class="center"><style>.gmulkbondijx{}</style><img src="/2025/05/21/note55/note55_pic17.png" class="gmulkbondijx"></div><p>  DMZ是为了解决安装防火墙后外部网络不能访问内部网络服务器的问题而设立的一个非安全系统与安全系统之间的缓冲区，这个缓冲区位于企业内部网络和外部网络之间的小网络区域内,<strong>在这个小网络区域内可以放置一些必须公开的服务器设施,如企业 Web服务器、FTP 服务器和论坛等</strong>。</p>]]></content>
    
    
    <summary type="html">软考真题做题笔记</summary>
    
    
    
    <category term="软考" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/"/>
    
    <category term="软件设计师" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"/>
    
    <category term="知识点拾遗" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%8B%BE%E9%81%97/"/>
    
    
    <category term="软考" scheme="http://example.com/tags/%E8%BD%AF%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>软件设计师 知识点拾遗 数据库技术基础</title>
    <link href="http://example.com/2025/05/21/note54/"/>
    <id>http://example.com/2025/05/21/note54/</id>
    <published>2025-05-21T02:51:10.000Z</published>
    <updated>2025-05-23T07:31:04.623Z</updated>
    
    <content type="html"><![CDATA[<style>.center {  width: auto;  display: table;  margin-left: auto;  margin-right: auto;}</style><h1>软件设计师 知识点拾遗 数据库技术基础</h1><ol><li>2016年下半年第53题</li></ol><div class="center"><style>.cnajfgumbqpf{}</style><img src="/2025/05/21/note54/note54_pic01.png" class="cnajfgumbqpf"></div><p>  这里主要是想强调一下冗余的概念，判断一个依赖是否冗余，应该基于该依赖是否可以从其它依赖推导出来，以本题为例：</p><ul><li>A1→A2：基础依赖，无法从其他推导</li><li>A1A2→A3：基础依赖，无法从其他推导</li><li>A2→A4：基础依赖，无法从其他推导</li><li>A1→A4：<strong>可以通过A1→A2和A2→A4传递推导出来，因此是一个冗余依赖</strong></li></ul><hr><ol start="2"><li>2016年上半年第52题</li></ol><div class="center"><style>.hqvkleivsurb{}</style><img src="/2025/05/21/note54/note54_pic02.png" class="hqvkleivsurb"></div><p>  数据库设计中规范化是在逻辑设计阶段进行的一项工作，<strong>该工作负责把关系模式进行规范</strong>，以减少冗余，以及一定程度上消除修改异常，插入异常及删除异常。</p><hr><ol start="3"><li>2015年下半年第53题54题</li></ol><div class="center"><style>.gghgkomxvnwj{}</style><img src="/2025/05/21/note54/note54_pic03.png" class="gghgkomxvnwj"></div><ul><li>分片透明：<strong>用户无需知道逻辑上的表在物理上如何被分割（分片）存储在不同的节点上</strong>。</li><li>复制透明：用户无需知道数据是否存在多个副本（复制），系统自动维护副本一致性。</li><li>位置透明：用户无需知道数据具体存储在哪个物理节点上，通过逻辑标识（如表名）访问数据。<br>​​特点​​：</li><li>逻辑透明：<strong>用户无需知道局部节点使用的数据模型差异，系统自动处理异构数据模型的转换</strong>。</li></ul><ol start="4"><li>2015年上半年第52题</li></ol><div class="center"><style>.hctospostdrd{}</style><img src="/2025/05/21/note54/note54_pic04.png" class="hctospostdrd"></div><p>  判断为无损连接还是有损连接：</p><ul><li>无损连接：无损连接是指将关系模式分解后，通过自然连接操作能够完全恢复原始关系中的所有数据，不丢失任何信息。</li><li>有损连接：有损连接是指关系模式分解后，通过自然连接操作无法完全恢复原始关系，会导致信息丢失或产生虚假元组。</li></ul><p>  判断是否保持函数依赖：</p><ul><li>保持函数依赖：分解后的所有关系模式的函数依赖集合的并集，能够逻辑蕴含原关系模式的所有函数依赖</li><li>不保持函数依赖：分解后的关系模式无法保持原关系模式的所有函数依赖，至少有一个原始函数依赖不能在分解后的任何关系中体现或推导</li></ul>]]></content>
    
    
    <summary type="html">软考真题做题笔记</summary>
    
    
    
    <category term="软考" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/"/>
    
    <category term="软件设计师" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"/>
    
    <category term="知识点拾遗" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%8B%BE%E9%81%97/"/>
    
    
    <category term="软考" scheme="http://example.com/tags/%E8%BD%AF%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>软件设计师 知识点拾遗 2024年上半年</title>
    <link href="http://example.com/2025/05/20/note53/"/>
    <id>http://example.com/2025/05/20/note53/</id>
    <published>2025-05-20T12:39:44.000Z</published>
    <updated>2025-05-23T07:30:32.416Z</updated>
    
    <content type="html"><![CDATA[<style>.center {  width: auto;  display: table;  margin-left: auto;  margin-right: auto;}</style><h1>软件设计师 知识点拾遗 2024年上半年</h1><p>  这一年的题说实话很玄乎…刚开始做的时候甚至觉得这套是网上的人瞎配的，因为题型跟做的前几年的一点都不一样，后来上网查了查也就这么一套题，就姑且当成真的吧…尤其是我做到最后发现阅读题跟21年的一模一样的时候更是觉得见鬼了…还有做的时候真是感觉很吃力，很多概念都没咋了解过，还一口气出了十几道的数据结构题…结果对完答案之后发现居然只错了15个，是最好的一次，数据结构也只错了一个，基本没复习过数据结构能做成这个样子也真是吃尽老本了…</p><h2 id="上午题">上午题</h2><div class="center"><style>.ykmvfokwqici{}</style><img src="/2025/05/20/note53/note53_pic01.png" class="ykmvfokwqici"></div><p>  离考试就剩三天了，鉴于目前的遗忘程度我觉得很有必要重新把所有排序算法的过程和时间复杂度全部复习一遍：</p><ul><li>直接插入排序：首先，将数组分为已排序区间（初始仅含第一个元素）和未排序区间（剩余元素）；然后，依次从未排序区间取出元素，与已排序区间的元素从后向前比较，若当前元素较小则后移已排序元素，直到找到合适位置插入，重复此过程直至未排序区间为空，最终完成排序。</li><li>折半插入排序：折半插入排序在直接插入排序的基础上优化了查找插入位置的步骤：首先将数组分为已排序区间（初始为第一个元素）和未排序区间，每次从未排序区间取出元素后，​​通过二分查找在已排序区间快速定位插入位置​​，然后统一后移该位置后的所有元素并完成插入。</li><li>简单选择排序：首先在未排序序列中​​遍历查找最小元素​​，然后将其与未排序区间的​​首个元素交换位置​​，使得已排序区间长度增加1。重复上述“查找最小值+交换”操作，直到未排序区间只剩一个元素时完成排序。</li><li>归并排序：归并排序采用​​分治思想​​：首先将数组递归地​​二分拆解​​为最小单元（单个元素），然后通过​​合并操作​​将相邻有序子序列逐层两两归并——每次合并时依次比较两个子序列的首元素，选取较小者放入新数组，直至所有元素有序。</li></ul><div class="center"><style>.kuujekbyorhf{}</style><img src="/2025/05/20/note53/note53_pic16.png" class="kuujekbyorhf"></div><hr><div class="center"><style>.bmmbjqwlljhn{}</style><img src="/2025/05/20/note53/note53_pic04.png" class="bmmbjqwlljhn"></div><p>  没学过4NF，在这里研究一下:</p><ul><li>1NF/2NF/3NF​​：仅处理函数依赖（X→Y），不涉及多值依赖。<ul><li>1NF：所有属性必须是​​原子值​​，每一列具有​​唯一名称​​，且不允许重复组或数组结构。</li><li>2NF：所有​​非主属性​​必须​​完全依赖​​于整个候选键（不能仅依赖部分键）。需要注意的是，这并非要求第二范式中不能存在复合主键，而是要求非主属性不能依赖于复合主键其中的一个或一部分值，而是要完全依赖整个复合主键。</li><li>3NF：所有非主属性必须​​直接依赖​​于候选键，不能存在​​传递依赖​。</li></ul></li><li>4NF​​：在BCNF基础上，<strong>进一步消除非平凡多值依赖</strong>（多值依赖即在关系模式中，若属性集X确定一组属性集Y的值，且Y与剩余属性Z无关，则称X多值决定Y，记作X→→Y）。</li></ul><hr><div class="center"><style>.rhyhbbdlfxpk{}</style><img src="/2025/05/20/note53/note53_pic05.png" class="rhyhbbdlfxpk"></div><p>  CD选项不是很清楚：</p><ul><li>REVOKE：<strong>用于收回已授予的权限</strong>（如 REVOKE SELECT ON table FROM user）。</li><li>DELETE：删除表中的数据行，与权限无关。</li><li>DROP：删除数据库对象（如表、索引），不涉及权限回收。</li></ul><hr><div class="center"><style>.fftnbgshonwx{}</style><img src="/2025/05/20/note53/note53_pic06.png" class="fftnbgshonwx"></div><p>  这道题也是蒙对的</p><p>  在数据库当中存在一个三级模式，这是数据库系统的核心架构，用于实现数据的逻辑独立性和物理独立性：</p><ul><li>外模式：是面向用户的局部逻辑视图，定义不同用户或应用程序能看到的数据结构和权限。而外模式是通过视图实现的，那么也就<strong>不难发现视图对应的就是用户视图</strong>。</li><li>模式：模式是全局逻辑结构，描述数据库中所有数据的逻辑组织和关系，如表、字段和约束等。<strong>模式对应的是基本表，即数据库中真实存在的表。属于概念层的结构</strong>。</li><li>内模式：内模式描述数据在存储介质上的物理结构和存取方法，<strong>对应的是存储文件，显然是使用内部视图来实现</strong>。</li></ul><hr><div class="center"><style>.ocivtgtnrxld{}</style><img src="/2025/05/20/note53/note53_pic07.png" class="ocivtgtnrxld"></div><p>  这道题是靠依稀的印象蒙对的，再复习一下：</p><ul><li>栈区：栈区是一块由编译器分配和释放的区域，函数调用时压栈，返回时弹栈。其中存放的有<strong>非静态局部变量</strong>、函数参数、返回地址等。</li><li>静态数据区：静态区的生命周期贯穿整个程序运行期，默认初始化为0。其中存储着全局变量、静态局部变量、常量等。</li><li>文本区：文本区的主要特点是只读性，这与其中存储着程序的可执行代码和字符串常量有关，如果对这些内容进行修改的话可能会导致段错误。</li><li>自由堆区：自由堆区的别名是动态内存区，从中可以发现这块区域的主要功能就是存储动态分配的内存，需要由程序员显式地分配和释放。</li></ul><div class="center"><style>.lxnwivyvnjqr{}</style><img src="/2025/05/20/note53/note53_pic17.png" class="lxnwivyvnjqr"></div><hr><div class="center"><style>.oouhykdukcyb{}</style><img src="/2025/05/20/note53/note53_pic08.png" class="oouhykdukcyb"></div><p>  这道题也是蒙对的，其实我几乎不知道什么是解释器。</p><p>  解释器​​是一种计算机程序，能够​​直接逐行读取、翻译并执行高级编程语言的源代码​​，而无需预先将其编译成机器码。它属于​​动态翻译执行​​的方式，与编译器（Compiler）的静态编译形成对比。解释器运行时需要实时翻译代码，而编译后的机器码可直接由CPU执行，<strong>因此解释器通常更慢</strong>。</p><hr><div class="center"><style>.tgqvqvyhjwyv{}</style><img src="/2025/05/20/note53/note53_pic09.png" class="tgqvqvyhjwyv"></div><p>  这题没蒙对，有必要把数据在网络中的传输再过一遍了</p><ul><li>应用层：数据的发出处，生成原始数据，添加应用层协议头。</li><li>传输层：数据被分割为段（TCP）或者数据报（UDP），添加传输层协议头。</li><li>网络层：段或者报被封装成数据包，添加IP头。</li><li>数据链路层：数据包被封装为帧，添加MAC头和帧尾。</li><li>物理层：数据转换为比特流，通过物理介质进行传输。</li></ul><p>  但其实此题跟这个知识点没什么关系，考察的主要是下面这个知识点：TCP通过序号对传输的字节流进行顺序标识，确保数据可靠、有序地传输。序号以字节为单位递增，<strong>因此正确答案是​​字节</strong>​​。</p><div class="center"><style>.nhtntyfldgsr{}</style><img src="/2025/05/20/note53/note53_pic18.png" class="nhtntyfldgsr"></div><hr><div class="center"><style>.jqpgvvutvfeo{}</style><img src="/2025/05/20/note53/note53_pic10.png" class="jqpgvvutvfeo"></div><ul><li>C选项：VLAN是局域网技术，仅作用于同一物理网络内的逻辑隔离。​​内外网通信​​需依赖防火墙、NAT等安全设备，VLAN本身无法实现。</li><li>D选项：VLAN不能阻止漏洞利用或恶意攻击（如ARP欺骗、DDoS），需结合其他安全措施（如ACL、IPS）。</li></ul><hr><div class="center"><style>.wjqstqjmxbez{}</style><img src="/2025/05/20/note53/note53_pic11.png" class="wjqstqjmxbez"></div><p>  数据的可靠性事实上指的并不是和数据安全有关的内容，而是要求数据在存储、传输或处理过程中​​不丢失、不损坏​​，且在需要时可完整恢复。那么这样一来<strong>最能保证数据可靠性的显然就是进行异地数据备份</strong>。</p><hr><div class="center"><style>.tdudmfjvyiak{}</style><img src="/2025/05/20/note53/note53_pic12.png" class="tdudmfjvyiak"></div><ul><li>撞库：黑客利用已泄露的账号密码，批量尝试登录其他网站。</li><li>社工库：黑客整合多平台泄露数据形成的​​信息库​​，用于查询或进一步攻击。</li><li>拖库：黑客直接入侵网站服务器，​<strong>​盗取整个用户数据库​</strong>​。</li><li>洗库：对已盗取的数据库进行​​筛选、提炼​​。</li></ul><hr><div class="center"><style>.kxwlnyjxbwri{}</style><img src="/2025/05/20/note53/note53_pic13.png" class="kxwlnyjxbwri"></div><p>  浮点数的规格化是指尾数（Mantissa）的绝对值必须满足一定条件，以最大化精度，补码表示下​​，规格化数的尾数需满足：</p><ul><li>正数：尾数最高位（符号位后第一位）必须为 ​​1​​（即 0.1xxxx…）。</li><li>负数：尾数最高位必须为 ​​0​​（即 1.0xxxx…）。</li></ul><hr><div class="center"><style>.nlgyrltvqtuf{}</style><img src="/2025/05/20/note53/note53_pic14.png" class="nlgyrltvqtuf"></div><p>CRC码由​​数据位（n位）​​和​​校验位（k位）​​组成，校验位是通过生成多项式计算得出的冗余码。其标准格式​​为，原始数据位保持不变，校验位​​追加在数据位之后​​，<strong>即 n位数据 + k位校验</strong>。</p>]]></content>
    
    
    <summary type="html">软考真题做题笔记</summary>
    
    
    
    <category term="软考" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/"/>
    
    <category term="软件设计师" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"/>
    
    <category term="知识点拾遗" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%8B%BE%E9%81%97/"/>
    
    
    <category term="软考" scheme="http://example.com/tags/%E8%BD%AF%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>软件设计师 知识点拾遗 算法设计与分析</title>
    <link href="http://example.com/2025/05/20/note52/"/>
    <id>http://example.com/2025/05/20/note52/</id>
    <published>2025-05-20T05:55:11.000Z</published>
    <updated>2025-05-23T07:29:56.083Z</updated>
    
    <content type="html"><![CDATA[<style>.center {  width: auto;  display: table;  margin-left: auto;  margin-right: auto;}</style><h1>软件设计师 知识点拾遗 算法设计与分析</h1><ol><li>2016年上半年第64题和65题</li></ol><div class="center"><style>.xiccjwdwsebx{}</style><img src="/2025/05/20/note52/note52_pic02.png" class="xiccjwdwsebx"></div><p>  归并排序的基本过程如下所述：</p><ul><li>分解：<ul><li>将待排序数组递归地分成两半，直到每个子数组只包含一个元素（此时默认有序）。</li></ul></li><li>合并：<br>将两个已排序的子数组合并为一个有序数组：<ul><li>比较两个子数组的首元素，取较小者放入结果数组；</li><li>重复上述步骤，直到某一子数组被完全合并；</li><li>将剩余子数组的元素直接追加到结果中。</li></ul></li></ul><hr><ol start="2"><li>2015年上半年第62题和63题</li></ol><div class="center"><style>.ydutzynjxfuc{}</style><img src="/2025/05/20/note52/note52_pic03.png" class="ydutzynjxfuc"></div><p>​  ​优先队列是一种特殊的队列数据结构，其中每个元素都有一个关联的​​优先级​​。元素的出队顺序不是由插入时间决定，而是由优先级高低决定：​​优先级最高的元素最先出队​。<strong>而堆是一个很好的用来维护优先级的数据结构</strong>。每次插入都需要重新堆化，<strong>这一时间复杂度为O(lgn)</strong>。</p>]]></content>
    
    
    <summary type="html">软考真题做题笔记</summary>
    
    
    
    <category term="软考" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/"/>
    
    <category term="软件设计师" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"/>
    
    <category term="知识点拾遗" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%8B%BE%E9%81%97/"/>
    
    
    <category term="软考" scheme="http://example.com/tags/%E8%BD%AF%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>软件设计师 知识点拾遗 2020年下半年</title>
    <link href="http://example.com/2025/05/19/note51/"/>
    <id>http://example.com/2025/05/19/note51/</id>
    <published>2025-05-19T07:57:11.000Z</published>
    <updated>2025-05-23T07:29:23.182Z</updated>
    
    <content type="html"><![CDATA[<style>.center {  width: auto;  display: table;  margin-left: auto;  margin-right: auto;}</style><h1>软件设计师 知识点拾遗 2020年下半年</h1><p>这套题做的比较糟糕，很多概念要么是不知道要么是又记不清了，将将过线…</p><h2 id="上午题">上午题</h2><div class="center"><style>.kohtihddjbtt{}</style><img src="/2025/05/19/note51/note51_pic01.png" class="kohtihddjbtt"></div><p>  在CPU中是控制器负责指令的取指、译码和执行控制流程，因此<strong>负责存储下一条指令地址的程序计数器肯定在控制器当中</strong>。</p><hr><div class="center"><style>.gpopkccvillb{}</style><img src="/2025/05/19/note51/note51_pic03.png" class="gpopkccvillb"></div><ul><li>发表权：保护期为作者终生及其死亡后50年​。​</li><li>修改权：属于著作人身权，​<strong>​不受时间限制​​，永久保护</strong>。</li><li>复制权、发行权：属于著作财产权，保护期为作者终生及死亡后​50年。​​</li></ul><hr><div class="center"><style>.kngqxvlrospe{}</style><img src="/2025/05/19/note51/note51_pic05.png" class="kngqxvlrospe"></div><p>  C/C++程序编译的标准流程为：</p><ul><li><strong>预处理</strong>：处理宏定义、头文件包含等（.c → .i）。</li><li><strong>编译</strong>：将预处理后的代码转换为汇编代码（.i → .s）。</li><li><strong>汇编</strong>：将汇编代码转换为机器指令（目标文件，.s → .o）。</li><li><strong>链接</strong>：合并目标文件和库文件，生成可执行程序（.o → 可执行文件）。</li></ul><hr><div class="center"><style>.yqnmhfxmktpd{}</style><img src="/2025/05/19/note51/note51_pic06.png" class="yqnmhfxmktpd"></div><p>  由题意可得，一个索引块的大小为<strong>1KB</strong>，而一个地址项的大小为<strong>4字节</strong>，那么<strong>一个索引块中就可以存储1024÷4=256个数据块</strong>。</p><ul><li>5个直接地址索引：5个块 × 1KB = ​​5 KB​​。</li><li>2个一级间接地址索引：2个索引块 × 256块/索引块 × 1KB = ​​512 KB​​。</li><li>1个二级间接地址索引：256 × 256 = 65536 块 × 1KB = ​​65536 KB​​。</li></ul><p>  总和即为<strong>5KB+512KB+65536KB=66053KB</strong>。</p><hr><div class="center"><style>.iyiuqootiovk{}</style><img src="/2025/05/19/note51/note51_pic07.png" class="iyiuqootiovk"></div><p>  <strong>喷泉模型是一种面向对象的软件开发方法</strong>，其核心特点是开发阶段的无缝迭代与回溯，强调各阶段之间的非线性交互和并行推进。与瀑布模型的线性流程不同，<strong>喷泉模型的开发活动之间不存在明显的边界</strong>，允许开发者在任意阶段根据需求动态调整（如设计时发现分析不足可回溯补充），尤其适合需求易变、需频繁重构的面向对象项目。其优势在于灵活性高、适应性强，但需严格管理文档和版本控制以避免混乱。</p><hr><div class="center"><style>.wrajunbmcmju{}</style><img src="/2025/05/19/note51/note51_pic08.png" class="wrajunbmcmju"></div><ul><li>参数多态：应用广泛、最纯的多态。</li><li>包含多态：同样的操作可用于一个类型及其子类型。包含多态一般需要进行运行时的类型检查。包含多态最常见的例子是子类型化，即一个类型是另一个类型的子类型。</li><li>过载多态：<strong>同一个名（操作符、函数名）在不同的上下文中有不同的类型</strong>。</li><li>强制多态：编译程序通过语义操作，把操作对象的类型强行加以变换，以符合函数或者操作符的要求。</li></ul><hr><div class="center"><style>.bnjaglmplitu{}</style><img src="/2025/05/19/note51/note51_pic09.png" class="bnjaglmplitu"></div><p>  <strong>A是抽象类，无&quot;直接对象&quot;</strong>，必须通过子类实例化，因此不可能存在&quot;A的直接对象与B1关联&quot;。</p><hr><div class="center"><style>.xbopxalewblc{}</style><img src="/2025/05/19/note51/note51_pic10.png" class="xbopxalewblc"></div><p>  B选项的错误之处其实和D选项一样，在这个文法中没有终结符&quot;(“、”)“和”/&quot;。</p><hr><div class="center"><style>.xkzrcnokffoi{}</style><img src="/2025/05/19/note51/note51_pic11.png" class="xkzrcnokffoi"></div><ul><li>属性冲突：同一属性可能会存在于不同的E-R图当中，由于设计人员或者出发点不同，属性的类型、取值范围和数据单位等可能不一致。</li><li>命名冲突：相同意义的属性在不同的E-R图当中有着不同的命名，或者是名词相同的属性在不同的E-R图当中代表着不同的意义。</li><li>结构冲突：同一实体在不同的E-R图中有不同的属性。或者同一对象在某一E-R图中被抽象为实体而又在另一E-R图中又被抽象为属性，需要统一。</li></ul><hr><div class="center"><style>.vqjxfxdtyxgw{}</style><img src="/2025/05/19/note51/note51_pic12.png" class="vqjxfxdtyxgw"></div><ul><li>左外联接：取出左侧关系中所有与右侧关系中任一元组都不匹配的元组，用空值 NULL填充所有来自右侧关系的属性。</li><li>右外联接：取出右侧关系中所有与左侧关系中任一元组都不匹配的元组，用空值 NULL填充所有来自左侧关系的属性。</li><li>完全外联接：完成左外连接和右外连接操作。</li></ul><hr><div class="center"><style>.dvpnoxtviwmz{}</style><img src="/2025/05/19/note51/note51_pic13.png" class="dvpnoxtviwmz"><style>.mvperllmjdst{}</style><img src="/2025/05/19/note51/note51_pic17.png" class="mvperllmjdst"></div><hr><div class="center"><style>.ciibemkmkzqg{}</style><img src="/2025/05/19/note51/note51_pic15.png" class="ciibemkmkzqg"></div><p>  当主机无法从DHCP服务器获取IP地址时，<strong>操作系统会自动分配169.254.0.0/16范围内的私有IP地址</strong>（APIPA机制）。</p><hr><div class="center"><style>.yysyhvhxiket{}</style><img src="/2025/05/19/note51/note51_pic16.png" class="yysyhvhxiket"></div><p>要开始记忆协议与对应的端口号了：</p><div class="center"><style>.tehxkysknndy{}</style><img src="/2025/05/19/note51/note51_pic18.png" class="tehxkysknndy"></div>]]></content>
    
    
    <summary type="html">软考真题做题笔记</summary>
    
    
    
    <category term="软考" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/"/>
    
    <category term="软件设计师" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"/>
    
    <category term="知识点拾遗" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%8B%BE%E9%81%97/"/>
    
    
    <category term="软考" scheme="http://example.com/tags/%E8%BD%AF%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>软件设计师 知识点拾遗 面向对象技术</title>
    <link href="http://example.com/2025/05/19/note50/"/>
    <id>http://example.com/2025/05/19/note50/</id>
    <published>2025-05-19T03:03:59.000Z</published>
    <updated>2025-05-23T07:28:52.031Z</updated>
    
    <content type="html"><![CDATA[<style>.center {  width: auto;  display: table;  margin-left: auto;  margin-right: auto;}</style><h1>软件设计师 知识点拾遗 面向对象技术</h1><ol><li>2017年上半年第40题</li></ol><div class="center"><style>.kujsslrvmted{}</style><img src="/2025/05/19/note50/note50_pic01.png" class="kujsslrvmted"></div><p>  多态除了在编写过程中表现为子类可以重写父类方法之外，在调用方的表现即为<strong>只需基于父类或接口定义的方法进行调用，无需关心具体是哪个子类对象在执行</strong>。</p><hr><ol start="2"><li>2016年下半年第40题</li></ol><div class="center"><style>.qdbizelxkzte{}</style><img src="/2025/05/19/note50/note50_pic03.png" class="qdbizelxkzte"></div><p>  当激活状态是B且内嵌为状态B2时，如果发生事件e2,则转移到C3状态；如果当前激活状态B的子状态不是B2，<strong>则事件e2发生后，不激发状态转换</strong>。当激活状态为B时，不论内嵌状态是哪个，则发生事件e1后，激活状态转换到C1；或者B中内嵌的两个结束状态均达到时会离开状态 B。</p><hr><ol start="3"><li>2016年下半年第46题和47题</li></ol><div class="center"><style>.ghdhklxeyyig{}</style><img src="/2025/05/19/note50/note50_pic05.png" class="ghdhklxeyyig"></div><ul><li>生成器模式：生成器模式的特点是<strong>将对象的构造过程与其表示分离，使得同样的构建过程可以创建不同的表示</strong>，主要用于分步骤构建复杂对象。</li><li>工厂方法模式：在工厂方法模式当中，父类（抽象工厂）只声明创建方法而不关心具体实现，子类（具体工厂）负责实现父类的创建方法并返回具体的产品实例。</li><li>原型模式：原型模式的核心思想是通过复制现有对象（原型）来创建新对象，而不是通过new实例化。因此原型模式可以基于克隆快速生成对象，避免重复执行耗时的初始化操作。</li><li>单例模式：单例模式确保一个类中只有一个实例，并提供一个全局访问点。它通过控制实例化过程，避免重复创建对象，节省资源。</li></ul><hr><ol start="4"><li>2016年上半年第47题</li></ol><div class="center"><style>.mdfrungwzgdp{}</style><img src="/2025/05/19/note50/note50_pic07.png" class="mdfrungwzgdp"></div><ul><li>组合模式：组合模式将对象组合成树形结构以表示“部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。</li><li>享元模式：享元模式运用共享技术有效地支持大量细粒度的对象，<strong>进而降低存储开销</strong>。</li><li>迭代器模式：迭代器提供一种方法顺序访问一个聚合对象中各个元素，而又不需暴露该对象的内部表示。</li><li>备忘模式：备忘在不破坏封装性的前提下，捕获一个对象的内部状态，并在对象之外保存这个状态。这样以后就可将对象恢复到原先保存的状态。</li></ul><hr><ol start="5"><li>2015年下半年第39题</li></ol><div class="center"><style>.rjleulcoyaxg{}</style><img src="/2025/05/19/note50/note50_pic08.png" class="rjleulcoyaxg"></div><p>  在UML类图中，继承关系用空心三角形+实线来表示。Car和Boat是Transport的子类。<strong>父类中move0方法为斜体，表示此类为抽象类，在子类中需要重置move0方法</strong>。</p><hr><ol start="6"><li>2015年上半年第38题</li></ol><div class="center"><style>.vrtkvcunsota{}</style><img src="/2025/05/19/note50/note50_pic09.png" class="vrtkvcunsota"></div><ul><li>面向对象分析：确定系统的功能、性能要求。</li><li>面向对象设计：设计分析模型和实现相应的源代码。</li><li>面向对象程序设计：<strong>选用一种面向对象程序设计语言</strong>，采用类、对象及其相关概念所进行的程序设计。</li></ul><hr><ol start="7"><li>2015年上半年第43题</li></ol><div class="center"><style>.mlhdvmyfdwpe{}</style><img src="/2025/05/19/note50/note50_pic10.png" class="mlhdvmyfdwpe"></div><p>  <strong>部署图用来显示系统中软件和硬件的物理架构</strong>。从部署图中可以了解到软件和硬件组件之间的物理关系以及处理结点的组件分布情况。</p>]]></content>
    
    
    <summary type="html">软考真题做题笔记</summary>
    
    
    
    <category term="软考" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/"/>
    
    <category term="软件设计师" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"/>
    
    <category term="知识点拾遗" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%8B%BE%E9%81%97/"/>
    
    
    <category term="软考" scheme="http://example.com/tags/%E8%BD%AF%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>软件设计师 知识点拾遗 2021年上半年</title>
    <link href="http://example.com/2025/05/18/note49/"/>
    <id>http://example.com/2025/05/18/note49/</id>
    <published>2025-05-18T07:54:08.000Z</published>
    <updated>2025-05-23T07:28:15.506Z</updated>
    
    <content type="html"><![CDATA[<style>.center {  width: auto;  display: table;  margin-left: auto;  margin-right: auto;}</style><h1>软件设计师 知识点拾遗 2021年上半年</h1><p>瓶颈期，依旧是20个</p><h2 id="上午题">上午题</h2><div class="center"><style>.hgwhurqidqpi{}</style><img src="/2025/05/18/note49/note49_pic01.png" class="hgwhurqidqpi"><div><p>  DMA方式传送数据时，数据直接在I/O设备与内存之间传输，无需CPU干预。<strong>每传送一个数据，DMA控制器需要占用一个​​存储周期来完成对内存的读写操作</strong>。其他选项与CPU执行指令或总线控制相关，而DMA的核心是绕过CPU直接访问内存，因此存储周期是最准确的描述。</p><hr><div class="center"><style>.danbgtboofmx{}</style><img src="/2025/05/18/note49/note49_pic03.png" class="danbgtboofmx"><div><p>  SQL注入攻击的核心是通过构造恶意的SQL输入，绕过应用程序的安全检查，直接操纵数据库，<strong>其​​首要目标​​是​​获取数据库的操作权限​</strong>​（如执行查询、删除数据等）。</p><hr><div class="center"><style>.utbeyedaxsgh{}</style><img src="/2025/05/18/note49/note49_pic04.png" class="utbeyedaxsgh"><div><p>  <strong>IPSec（Internet Protocol Security）是专门为​​IP数据报文​​提供加密、认证等安全服务的协议组</strong>，工作在网络层，可直接保护IP数据包的完整性和机密性。而HTTPS是加密HTTP流量的协议、TLS是加密TCP/UDP的协议。</p><hr><div class="center"><style>.enlwjidrrcsf{}</style><img src="/2025/05/18/note49/note49_pic06.png" class="enlwjidrrcsf"><table><thead><tr><th>阶段</th><th>目标</th><th>关键活动/输出物</th><th>相关工具/技术示例</th></tr></thead><tbody><tr><td><strong>1. 需求分析</strong></td><td>明确用户需求和系统功能</td><td>- 用户需求收集（访谈/问卷）<br>- 定义功能/非功能需求<br>- 输出《需求规格说明书》</td><td>JIRA, Confluence, 用户故事地图</td></tr><tr><td><strong>2. 系统设计</strong></td><td>规划系统架构和实现方案</td><td><strong>概要设计</strong>：<br>- 模块划分<br>- 技术栈选型<br><strong>详细设计</strong>：<br>- 数据结构/算法<br>- 数据库设计（ER图）</td><td>UML工具（Lucidchart）, Visio, ERMaster</td></tr><tr><td><strong>3. 编码实现</strong></td><td>将设计转化为可执行代码</td><td>- 编写代码<br>- 版本控制<br>- 单元测试</td><td>Git, VS Code, IntelliJ, JUnit/pytest</td></tr><tr><td><strong>4. 测试</strong></td><td>验证系统功能和质量</td><td>- 功能测试（黑盒）<br>- 性能测试<br>- 安全测试<br>- 用户验收测试（UAT）</td><td>Selenium, JMeter, OWASP ZAP, Postman</td></tr><tr><td><strong>5. 部署上线</strong></td><td>发布系统到生产环境</td><td>- 环境配置<br>- 自动化部署<br>- 数据迁移</td><td>Docker, Kubernetes, Jenkins, Ansible</td></tr><tr><td><strong>6. 运维与维护</strong></td><td>保障系统稳定运行并持续优化</td><td>- 性能监控<br>- Bug修复<br>- 功能迭代</td><td>Prometheus, ELK, Grafana, Sentry</td></tr></tbody></table><div><p>  其中，<strong>模块之间的接口设计属于概要设计的主要内容</strong>。</p><hr><div class="center"><style>.cabdylcpappt{}</style><img src="/2025/05/18/note49/note49_pic08.png" class="cabdylcpappt"><div><p>  <strong>先前的笔记中关于这一项的内容应该写错了</strong>，但是我没找到具体是在哪篇笔记里，在此特别订正一下。正确的面向对象分析的五大活动顺序应该为：</p><ol><li>认定对象</li><li>组织对象</li><li>描述对象间的相互作用</li><li>确定对象的操作</li><li>定义对象的内部信息</li></ol><hr><div class="center"><style>.vsqdyklavqib{}</style><img src="/2025/05/18/note49/note49_pic09.png" class="vsqdyklavqib"><div><ul><li>单一责任原则：就一个类而言，应该仅有一个引起它变化的原因。即，当需要修改某个类的时候原因有且只有一个，让一个类只做一种类型责任。</li><li>开放-封闭原则：软件实体应该是可以扩展的，即开放的；但是是不可修改的，即封闭的。</li><li>里氏替换原则：子类型必须能够替换掉他们的基类型。即，在任何父类可以出现的地方，都可以用子类的实例来赋值给父类型的引用。</li><li>依赖倒置原则：抽象不应该依赖于细节，细节应该依赖于抽象。即，高层模块不应该依赖于底层模块，二者都应该依赖于抽象。</li><li>接口分离原则：<strong>不应该强迫客户依赖于它们不用的方法。接口属于客户，不属于它所在的类层次。即，依赖于抽象，不依赖于具体，同时在抽象级别不应该有对细节的依赖</strong>。这样做的好处就在于可以最大限度地应对可能的变化。</li></ul><hr><div class="center"><style>.heopkttwlixj{}</style><img src="/2025/05/18/note49/note49_pic10.png" class="heopkttwlixj"><div><ul><li>41题：UML状态图用于对​<strong>​反应型对象</strong>​​的动态行为建模。</li><li>43题：这里混淆了状态和状态转换的概念，前者是指一个对象的稳定条件，是对象在某一时刻的静态属性。而<strong>状态转换才是由事件触发的</strong>，并导致对象从当前状态切换到新状态。</li></ul><hr><div class="center"><style>.akrnryavbdwx{}</style><img src="/2025/05/18/note49/note49_pic11.png" class="akrnryavbdwx"><div><ul><li>44题：<ul><li>命令模式：<strong>命令模式将请求封装为独立的对象</strong>（命令），允许用户参数化客户端（调用者）与接收者（执行者），从而支持请求的排队、撤销、日志记录等操作。</li><li>中介者模式：中介者模式的核心思想是“使用一个中介者来封装一系列对象之间的交互，使各个对象不需要显式地相互引用”，即通过引入中介对象来集中管理多个对象之间的交互，从而减少对象间的直接耦合，使系统更易于维护和扩展。</li></ul></li><li>45题：在UML类图当中，一个圆圈即为接口的意思，在上图中只在<strong>Operation</strong>中出现了。</li></ul><hr><div class="center"><style>.pulrulghtjwe{}</style><img src="/2025/05/18/note49/note49_pic12.png" class="pulrulghtjwe"><div><p>  使用线性探测法先求出关键字所在的位置，使用关键字key%m得出所存储的位置，如果遇到冲突则(key+di)%m的计算方式得到第二次关键字存储的位置，<strong>所以有可能第一个不是e的同义词</strong>。</p><hr><div class="center"><style>.rwwvbxvkepqv{}</style><img src="/2025/05/18/note49/note49_pic14.png" class="rwwvbxvkepqv"><div><p>  <strong>使用SMTP协议完成从客户端向服务器发送文件</strong>，使用POP3协议实现从客户端接收服务器的文件。</p>]]></content>
    
    
    <summary type="html">软考真题做题笔记</summary>
    
    
    
    <category term="软考" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/"/>
    
    <category term="软件设计师" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"/>
    
    <category term="知识点拾遗" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%8B%BE%E9%81%97/"/>
    
    
    <category term="软考" scheme="http://example.com/tags/%E8%BD%AF%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>软件设计师 知识点拾遗 结构化开发方法</title>
    <link href="http://example.com/2025/05/18/note48/"/>
    <id>http://example.com/2025/05/18/note48/</id>
    <published>2025-05-18T06:43:45.000Z</published>
    <updated>2025-05-23T07:27:42.809Z</updated>
    
    <content type="html"><![CDATA[<style>.center {  width: auto;  display: table;  margin-left: auto;  margin-right: auto;}</style><h1>软件设计师 知识点拾遗 结构化开发方法</h1><ol><li>2016年上半年第19题</li></ol><div class="center"><style>.rplysfzvgfvk{}</style><img src="/2025/05/18/note48/note48_pic01.png" class="rplysfzvgfvk"></div><p>软件体系结构图属于系统设计阶段的输出，用于定义模块划分、组件关系等高层结构，<strong>不属于需求分析阶段的直接产物</strong>。</p><hr><ol start="2"><li>2015年上半年第34题</li></ol><div class="center"><style>.thyssbfsxrwf{}</style><img src="/2025/05/18/note48/note48_pic03.png" class="thyssbfsxrwf"></div><p>​​桩程序​​是软件测试中的一种模拟组件，主要用于在​​模块测试​​或​​集成测试​​中替代尚未开发或不可用的依赖模块。例如当测试某个模块（A）时，如果它调用了另一个未完成的模块（B），可以用桩程序临时替代B，返回预设的测试数据，确保A能独立测试。<strong>而自底向上测试时显然不可能用到桩程序</strong>。</p><hr><ol start="3"><li>2014年下半年第15题</li></ol><div class="center"><style>.gvvkchvyecck{}</style><img src="/2025/05/18/note48/note48_pic04.png" class="gvvkchvyecck"></div><p>结构化方法​​在大规模、高复杂度项目中易出现​​模块间耦合高、灵活性不足​​的问题。而<strong>​面向对象方法​通过封装、继承、多态等特性更适应复杂需求，成为现代大规模项目的首选</strong>。</p>]]></content>
    
    
    <summary type="html">软考真题做题笔记</summary>
    
    
    
    <category term="软考" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/"/>
    
    <category term="软件设计师" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"/>
    
    <category term="知识点拾遗" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%8B%BE%E9%81%97/"/>
    
    
    <category term="软考" scheme="http://example.com/tags/%E8%BD%AF%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>软件设计师 知识点拾遗 软件工程基础知识</title>
    <link href="http://example.com/2025/05/17/note47/"/>
    <id>http://example.com/2025/05/17/note47/</id>
    <published>2025-05-17T09:44:41.000Z</published>
    <updated>2025-05-23T07:27:10.879Z</updated>
    
    <content type="html"><![CDATA[<style>.center {  width: auto;  display: table;  margin-left: auto;  margin-right: auto;}</style><h1>软件设计师 知识点拾遗 软件工程基础知识</h1><ol><li>2017年下半年第34题</li></ol><div class="center"><style>.kvqlzbmpsnwo{}</style><img src="/2025/05/17/note47/note47_pic02.png" class="kvqlzbmpsnwo"></div><p>  再来复习一下各种耦合的概念：</p><ul><li>无直接耦合：两个模块之间没有直接的关系。</li><li>数据耦合：两个模块之间存在简单的值传递。</li><li>标记耦合：两个模块之间存在<strong>数据结构</strong>的传递。</li><li>控制耦合：一个模块可以调用另一个模块中的某一个功能。</li><li>外部耦合：模块间通过软件之外的环境连接。</li><li>公共耦合：多个模块共享全局数据。</li><li>内容耦合：一个模块直接使用另一个模块的内部数据，或者一个模块通过非正常入口转入另一个模块内部。</li></ul><hr><ol start="2"><li>2017年上半年第17题和18题</li></ol><div class="center"><style>.vhwqhxfprjum{}</style><img src="/2025/05/17/note47/note47_pic03.png" class="vhwqhxfprjum"></div><p>  这道题目的要点在于第(18)题，要注意的是<strong>第几天</strong>开始。也就是说事件A的开始时间是第1天而非第0天。平常只注意项目完成时间的话可能会在这里犯错。</p><hr><ol start="3"><li>2017年上半年第29题</li></ol><div class="center"><style>.iyvkdrtojhof{}</style><img src="/2025/05/17/note47/note47_pic04.png" class="iyvkdrtojhof"></div><p>  螺旋模型是一种演化软件开发过程模型，它兼顾了快速原型的迭代特征以及瀑布模型的系统化与严格监控。螺旋模型最大的特点在于引入了其他模型不具备的风险分析，使软件在无法排除重大风险时有机会停止，以减小损失。同时，在每个迭代阶段构建原型是螺旋模型用以减小风险的途径。<strong>螺旋模型更适合大型、昂贵、系统级的软件应用</strong>。</p><hr><ol start="4"><li>2016年下半年第29题和30题</li></ol><div class="center"><style>.brvhetpkoqsb{}</style><img src="/2025/05/17/note47/note47_pic06.png" class="brvhetpkoqsb"></div><ul><li>瀑布模型：瀑布模型是将开发阶段描述为从一个阶段瀑布般转换到另一个阶段的过程。<strong>作为一种阶段顺序固定​​且​​强调文档驱动的模型，瀑布模型最大的问题就是难以适应动态变化的需求</strong>。</li><li>原型模型：在原型模型中，开发人员会快速地构造出整个系统或者系统的一部分以理解或澄清问题。</li><li>增量模型：增量模型是把软件产品作为一系列的增量构件来设计、编码、集成和测试，每个构件由相互作用的模块组成。</li><li>喷泉模型：喷泉模型开发过程中以用户需求为动力，以对象为驱动，适合于面向对象的开发方法。</li></ul><hr><ol start="5"><li>2016年下半年第36题</li></ol><div class="center"><style>.rtspxppvshmc{}</style><img src="/2025/05/17/note47/note47_pic08.png" class="rtspxppvshmc"></div><p>  这次来复习内聚的类型：</p><ul><li>偶然内聚：一个模块内的各个处理元素之间没有任何联系。</li><li>逻辑内聚：一个模块内执行若干个逻辑上相似的功能。</li><li>时间内聚：把需要同时执行的动作组合在一起形成的模块。</li><li>过程内聚：一个模块可以完成多个任务，且必须按照指定的过程执行。</li><li>通信内聚：<strong>模块内的所有处理元素都在同一个数据结构上操作</strong>。</li><li>顺序内聚：一个模块内的各个处理元素都密切相关于同一个过程且必须顺序执行，上一个元素的输出就是下一个元素的输入。</li><li>功能内聚：模块内的所有元素共同作用于完成同一个功能，缺一不可。</li></ul><hr><ol start="6"><li>2015年下半年第34题</li></ol><div class="center"><style>.klxdclboamut{}</style><img src="/2025/05/17/note47/note47_pic11.png" class="klxdclboamut"></div><p>  逆向工程这个概念比较好理解，就是对已有的代码、结构或者设计进行分析，恢复其逻辑或者文档。但是为什么是软件维护工具而不是软件开发工具呢？这是因为对工程进行逆向并不是从零开始的，而开发一定是从零开始的。</p><hr><ol start="7"><li>2015年上半年第16题</li></ol><div class="center"><style>.igjqiuedintt{}</style><img src="/2025/05/17/note47/note47_pic12.png" class="igjqiuedintt"></div><ul><li>概要：<strong>题目描述的&quot;分解为子系统&quot;、&quot;建立体系结构&quot;正是概要设计的核心任务</strong>。</li><li>详细：详细设计是在概要设计之后，主要进行模块内部的具体实现设计。</li><li>结构化：这是设计方法，不是设计阶段。</li><li>面向对象：这是编程范式，不是设计阶段。</li></ul><hr><ol start="8"><li>2015年上半年第19题</li></ol><div class="center"><style>.xpjkqxxqzgds{}</style><img src="/2025/05/17/note47/note47_pic13.png" class="xpjkqxxqzgds"></div><ul><li>风险影响：仅反映风险发生后可能造成的损失程度，但未考虑发生概率。</li><li>风险概率: 仅反映风险发生的可能性，但未考虑实际影响程度。</li><li>风险暴露：综合了风险影响和风险概率（通常计算公式：风险暴露=风险影响×风险概率），<strong>是设定优先级的科学依据</strong>。</li><li>风险控制：这是风险应对措施，而非优先级评估依据。</li></ul>]]></content>
    
    
    <summary type="html">软考真题做题笔记</summary>
    
    
    
    <category term="软考" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/"/>
    
    <category term="软件设计师" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"/>
    
    <category term="知识点拾遗" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%8B%BE%E9%81%97/"/>
    
    
    <category term="软考" scheme="http://example.com/tags/%E8%BD%AF%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>软件设计师 知识点拾遗 操作系统知识</title>
    <link href="http://example.com/2025/05/17/note46/"/>
    <id>http://example.com/2025/05/17/note46/</id>
    <published>2025-05-17T07:06:32.000Z</published>
    <updated>2025-05-23T07:26:31.941Z</updated>
    
    <content type="html"><![CDATA[<style>.center {  width: auto;  display: table;  margin-left: auto;  margin-right: auto;}</style><h1>软件设计师 知识点拾遗 操作系统知识</h1><ol><li>2017年上半年第24题</li></ol><div class="center"><style>.qzhdovnbgsxy{}</style><img src="/2025/05/17/note46/note46_pic02.png" class="qzhdovnbgsxy"></div><p>  在有限的资源下，要保证系统不发生死锁，可以按照这种逻辑来分析：首先给每个进程分配所需资源数减一，然后再给系统保留一个资源，这种情况下是不可能发生死锁的。而对于本题来说，<strong>就是 3 × (5 - 1) + 1 = 13个资源</strong>。</p><hr><ol start="2"><li>2016年上半年第23题</li></ol><div class="center"><style>.erzpdhyiodno{}</style><img src="/2025/05/17/note46/note46_pic03.png" class="erzpdhyiodno"></div><p>  每当用户按下或者释放某一个键的时候，<strong>会产生一个中断</strong>，该中断激活键盘驱动程序KEYBOARD.DRV来对键盘中断进行处理。</p><hr><ol start="3"><li>2016年上半年第25题</li></ol><div class="center"><style>.sirkdjmiujsi{}</style><img src="/2025/05/17/note46/note46_pic04.png" class="sirkdjmiujsi"></div><p>  旋转延迟时间​​是指磁盘的盘片旋转到目标扇区所需的时间。当磁头移动到正确的磁道（寻道完成）后，需要等待目标扇区旋转到磁头下方才能开始读写数据，这段等待时间就是旋转延迟时间。</p><hr><ol start="3"><li>2014年下半年第28题</li></ol><div class="center"><style>.vndljnkvscqi{}</style><img src="/2025/05/17/note46/note46_pic07.png" class="vndljnkvscqi"></div><p>进程资源图能否化简取决于是否存在至少一个非阻塞进程，通过逐步模拟该进程获取资源、执行完成并释放资源的过程，若能最终移除所有进程，则图可化简；否则存在死锁。化简顺序应优先选择非阻塞进程或能解除最多阻塞的进程，必要时通过拓扑排序打破循环等待链。例如，若所有进程相互阻塞且无法释放资源，则系统处于死锁状态。</p>]]></content>
    
    
    <summary type="html">软考真题做题笔记</summary>
    
    
    
    <category term="软考" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/"/>
    
    <category term="软件设计师" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"/>
    
    <category term="知识点拾遗" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%8B%BE%E9%81%97/"/>
    
    
    <category term="软考" scheme="http://example.com/tags/%E8%BD%AF%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>软件设计师 知识点拾遗 2022年上半年部分并2021年下半年</title>
    <link href="http://example.com/2025/05/15/note45/"/>
    <id>http://example.com/2025/05/15/note45/</id>
    <published>2025-05-15T14:40:25.000Z</published>
    <updated>2025-05-23T07:25:53.254Z</updated>
    
    <content type="html"><![CDATA[<style>.center {  width: auto;  display: table;  margin-left: auto;  margin-right: auto;}</style><h1>软件设计师 知识点拾遗 2022年上半年部分并2021年下半年</h1><p>2022年的题做了30多道题之后才发现题不全，然后又重新做了下2021年下半年的题，今天错的是20个，又有一点进步~</p><h2 id="一、2022年上半年部分题">一、2022年上半年部分题</h2><div class="center"><style>.ovsnnkmwpgsx{}</style><img src="/2025/05/15/note45/note45_pic01.png" class="ovsnnkmwpgsx"></div><p>  不再赘述DRAM和SRAM的具体概念，要强调的是<strong>SRAM的功率要比DRAM更大</strong>，这是因为DRAM比SRAM更高的集成率使得其在相同容量下所用的芯片更少一些，降低了功率输出。</p><hr><div class="center"><style>.kxoxkojeobrl{}</style><img src="/2025/05/15/note45/note45_pic02.png" class="kxoxkojeobrl"></div><p>  首先，所谓的多级中断的含义是系统中存在多个不同优先级的中断源，当高优先级中断正在执行时，允许被更高优先级的中断打断，形成嵌套处理机制。因此，<strong>堆栈的“后进先出”特性完美匹配中断嵌套场景</strong>，每次中断只需压栈（PUSH）现场信息，返回时弹栈（POP）即可自动恢复。</p><hr><div class="center"><style>.aligktgqfprj{}</style><img src="/2025/05/15/note45/note45_pic03.png" class="aligktgqfprj"></div><ul><li>A选项，精简指令集的设计目标之一就是简化指令，<strong>使大多数指令能在​​单时钟周期​​内完成</strong>，提高执行效率。</li><li>B选项，由于在RISC中有更多的寄存器，因此硬布线控制器比较适合它；而CISC需要通过微代码解释复杂指令，所以普遍采用微程序控制器。</li><li>C选项，显而易见。</li><li>D选项，现代RISC和CISC架构<strong>均广泛采用​​流水线技术</strong>​​以提高指令吞吐量。</li></ul><hr><div class="center"><style>.wvunolpilyum{}</style><img src="/2025/05/15/note45/note45_pic04.png" class="wvunolpilyum"></div><ul><li>著作权：著作权的保护期一般为作者终生加上其死后的50年，<strong>不可延长</strong>。</li><li>专利权：发明专利保护期20年，实用新型/外观设计10年，均​<strong>​不可延长</strong>。</li><li>商标权：保护期10年，但​​可<strong>无限续展</strong>​​（每次续展延长10年），只需在到期前申请并缴纳费用。</li><li>商业秘密权：保护期理论上是​​永久的​​（只要信息保持秘密性），但一旦公开即失效，​<strong>​无需延长</strong>​​。</li></ul><hr><div class="center"><style>.gvkirljmlsge{}</style><img src="/2025/05/15/note45/note45_pic05.png" class="gvkirljmlsge"><table><thead><tr><th><strong>对比维度</strong></th><th><strong>边界值分析法</strong></th><th><strong>判定覆盖</strong></th></tr></thead><tbody><tr><td><strong>定义</strong></td><td>通过测试输入域的边界值及邻近值来发现错误。</td><td>确保程序中的每个逻辑判断（真/假）至少执行一次。</td></tr><tr><td><strong>核心目标</strong></td><td>验证边界条件的正确处理。</td><td>覆盖所有逻辑分支，保证条件完整性。</td></tr><tr><td><strong>典型示例</strong></td><td>测试&quot;年龄≥18&quot;时输入17、18、19。</td><td>测试<code>if (A &amp;&amp; B)</code>需覆盖A真/B真、A假/B假等组合。</td></tr><tr><td><strong>测试阶段</strong></td><td>黑盒测试</td><td>白盒测试</td></tr></tbody></table></div><hr><div class="center"><style>.bnifowboydri{}</style><img src="/2025/05/15/note45/note45_pic06.png" class="bnifowboydri"></div><p>  众所周知，视图是一个虚拟表，但是<strong>其中保存的是视图的查询逻辑，亦即视图定义</strong>，而非查询结果。视图每次会查询动态生成结果，数据字典不缓存结果，否则无法反映基表变化。</p><hr><div class="center"><style>.madikktseowa{}</style><img src="/2025/05/15/note45/note45_pic07.png" class="madikktseowa"></div><p>  经典记不清，在树中存在如下关系：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub><mo>=</mo><mn>1</mn><mo>+</mo><msub><mi>n</mi><mn>2</mn></msub><mo>+</mo><mn>2</mn><msub><mi>n</mi><mn>3</mn></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mrow><mo fence="true">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo fence="true">)</mo></mrow><msub><mi>n</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">n_0=1+n_2+2n_3+...+\left( m-1 \right) n_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">...</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">n_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>代表度为m的结点的个数。</p><h2 id="二、2021年下半年">二、2021年下半年</h2><div class="center"><style>.fkbkmvtyryux{}</style><img src="/2025/05/15/note45/note45_pic09.png" class="fkbkmvtyryux"></div><p>  当存在侵权行为时，赔偿责任通常仅由故意或者存在重大过失的侵权方承担，在本题中即由广大公司（经销商）承担，<strong>而鸿达公司这些善意使用者支付合理费用之后可以继续使用该软件</strong>。</p><hr><div class="center"><style>.igwxtqoxwhrx{}</style><img src="/2025/05/15/note45/note45_pic12.png" class="igwxtqoxwhrx"></div><p>  增量模型有以下不足之处：如果没有对用户的变更要求进行规划，那么产生的初始增量可能会造成后来增量的不稳定；如果需求不像早期思考的那样稳定和完整，那么一些增量就需要重新开发。<strong>综上所述，增量模型强调开发阶段性早期计划，并且有较高的系统管理成本</strong>。</p><hr><div class="center"><style>.oswfueeuokxi{}</style><img src="/2025/05/15/note45/note45_pic13.png" class="oswfueeuokxi"></div><p>  系统测试是软件测试的重要阶段，其目标是​​验证整个系统是否符合用户需求。因此，<strong>测试用例的设计必须基于​​需求分析阶段​​的输出</strong>，而非其他开发阶段的产物。</p><ul><li>概要设计：决定系统如何分解为模块，但系统测试关注的是整体功能，而非模块间交互（这是集成测试的范畴）。</li><li>详细设计：涉及具体算法或数据库设计，属于开发细节，系统测试不验证这些内容。</li><li>软件实现：代码是测试的执行对象，但测试目标仍需从需求中提取。</li></ul><hr><div class="center"><style>.fefediqchhws{}</style><img src="/2025/05/15/note45/note45_pic14.png" class="fefediqchhws"></div><ul><li>可行性研究报告：规划阶段核心文档，用于评估项目是否可行（用户需参与讨论）。</li><li>总体规划报告：规划阶段输出，明确系统目标和范围（用户需确认）。</li><li>项目开发计划：分析阶段可能制定初步开发计划（用户可能参与评审）。</li><li>用户使用手册：系统完成后编写，指导终端用户操作，​<strong>​不用于前期交流</strong>​​。</li></ul><hr><div class="center"><style>.mmorvuusgany{}</style><img src="/2025/05/15/note45/note45_pic16.png" class="mmorvuusgany"></div><p>  在面向对象当中，类之间的关系主要有以下4种，按耦合强度从弱到强排序：</p><ul><li>依赖：临时性使用，不具有长期持有关系。</li><li>关联：长期持有引用。</li><li>聚合：整体与部分可以独立存在。</li><li>组合：部分不可能脱离整体存在。</li></ul><p>  <em>注：本题答案众说纷纭，能够清晰认识概念即可。</em></p><hr><div class="center"><style>.rnyeyooewgsf{}</style><img src="/2025/05/15/note45/note45_pic18.png" class="rnyeyooewgsf"></div><p>  存储过程将SQL逻辑（如UPDATE user SET balance=…）隐藏在存储过程中，第三方仅调用sp_update_balance()，无需知道具体表名或字段。这样一来，可限制第三方直接操作表的权限，仅允许执行特定存储过程。也能避免SQL注入风险，且表结构变更时只需修改存储过程，不影响调用方。</p>]]></content>
    
    
    <summary type="html">软考真题做题笔记</summary>
    
    
    
    <category term="软考" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/"/>
    
    <category term="软件设计师" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"/>
    
    <category term="知识点拾遗" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%8B%BE%E9%81%97/"/>
    
    
    <category term="软考" scheme="http://example.com/tags/%E8%BD%AF%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>软件设计师 知识点拾遗 数据结构</title>
    <link href="http://example.com/2025/05/15/note44/"/>
    <id>http://example.com/2025/05/15/note44/</id>
    <published>2025-05-15T12:37:33.000Z</published>
    <updated>2025-05-23T07:25:18.901Z</updated>
    
    <content type="html"><![CDATA[<style>.center {  width: auto;  display: table;  margin-left: auto;  margin-right: auto;}</style><h1>软件设计师 知识点拾遗 数据结构</h1><ol><li>2015年下半年第64题和65题</li></ol><div class="center"><style>.kewoyibjrtni{}</style><img src="/2025/05/15/note44/note44_pic01.png" class="kewoyibjrtni"></div><ul><li><strong>插入排序</strong>：其工作原理是将数组分为已排序和未排序的两部分，逐个将未排序元素插入到已排序部分的正确位置上。这种排序方法适用于小规模数据或者<strong>基本有序</strong>的数据。</li><li><strong>归并排序</strong>：归并排序是分治法的典型案例，其基本过程如下所述：将待排序的线性表不断地切分为若干个子表，直到每个子表只包含一个元素，这时，可以认为这是一个有序表。随后将子表两两合并，每合并一次就会产生一个新的且更长的有序表，如此循环往复即完成了排序。归并排序一般用于对大规模且需要稳定排序的数据进行排序。</li><li><strong>快速排序</strong>：快速排序也是一种应用分治法的排序方式，它首先从数组中选取一个基准值（这一基准值通常是待划分数组的中位数），随后将数组重新排列，使得基准值左侧的元素全部小于它而其右侧的元素全部大于它。然后继续对左右两侧子数组分别重复上述过程，直到子数组长度为1或者0。快速排序适合对大规模乱序数据排序。</li><li><strong>计数排序</strong>：计数排序会统计每个关键字的出现次数，通过累加计数确定元素的位置。这一排序方法适用于<strong>关键字范围小且密集</strong>的数据。</li></ul><ol start="2"><li>2015年上半年第61题</li></ol><div class="center"><style>.wkpzmiklxvaf{}</style><img src="/2025/05/15/note44/note44_pic02.png" class="wkpzmiklxvaf"></div><p>  简单选择排序的基本方法是:①从待排序序列中，找到关键字最小的元素;②如果最小元素不是待排序序列的第一个元素，将其和第一个元素互换;③从余下的 N-1个元素中，找出关键字最小的元素，重复②步，直到排序结束。</p>]]></content>
    
    
    <summary type="html">软考真题做题笔记</summary>
    
    
    
    <category term="软考" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/"/>
    
    <category term="软件设计师" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"/>
    
    <category term="知识点拾遗" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%8B%BE%E9%81%97/"/>
    
    
    <category term="软考" scheme="http://example.com/tags/%E8%BD%AF%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络实验 配置IPv4静态路由和缺省路由</title>
    <link href="http://example.com/2025/05/15/note43/"/>
    <id>http://example.com/2025/05/15/note43/</id>
    <published>2025-05-15T12:06:43.000Z</published>
    <updated>2025-06-21T10:04:47.054Z</updated>
    
    <content type="html"><![CDATA[<style>.center {  width: auto;  display: table;  margin-left: auto;  margin-right: auto;}</style><h1>计算机网络实验 配置IPv4静态路由和缺省路由</h1><h2 id="一、要求文档">一、要求文档</h2><div class="center'><style>.tflglckhurqd{}</style><style>.bqyebkpqcpzv{}</style><style>.xnpmfbwelteh{}</style><style>.jggomixicfwy{}</style><style>.jetbysftmtjr{}</style><style>.ryupbuvmeghh{}</style><style>.lcyjcvjjfcpy{}</style></div><h2 id="二、命令实现">二、命令实现</h2><h3 id="Part-2-基础设置配置">Part 2 基础设置配置</h3><h4 id="Step-2-路由器基础配置">Step 2 路由器基础配置</h4><p>  不再赘述，详情可以参见<a href="https://loquattree.xyz/2025/05/15/note42/">计算机网络实验 配置RIPv2动态网络</a></p><h4 id="Step-3-路由器IP配置">Step 3 路由器IP配置</h4><p>根据要求内容配置路由器的IP地址，以R3为例，执行以下命令：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs text">R3#configure t<br>Enter configuration commands, one per line.  End with CNTL/Z.<br><br>R3(config-if)#interface s0/0/0<br>R3(config-if)#ip address 10.1.1.2 255.255.255.252<br>R3(config-if)#clock rate 128000<br>R3(config-if)#no shutdown<br><br>R3(config-if)#<br>%LINK-5-CHANGED: Interface Serial0/0/0, changed state to up<br><br>R3(config-if)#exit<br>R3(config)#<br>%LINEPROTO-5-UPDOWN: Line protocol on Interface Serial0/0/0, changed state to up<br><br>R3(config)#interface g0/1<br>R3(config-if)#ip address 192.168.1.1 255.255.255.0<br>R3(config-if)#no shutdown<br><br>R3(config-if)#<br>%LINK-5-CHANGED: Interface GigabitEthernet0/1, changed state to up<br><br>%LINEPROTO-5-UPDOWN: Line protocol on Interface GigabitEthernet0/1, changed state to up<br><br>R3(config-if)#exit<br><br>&lt;!-- 配置两个回环端口 --&gt;<br>R3(config)#interface loopback 0<br><br>R3(config-if)#<br>%LINK-5-CHANGED: Interface Loopback0, changed state to up<br><br>%LINEPROTO-5-UPDOWN: Line protocol on Interface Loopback0, changed state to up<br><br>R3(config-if)#ip address 209.165.200.225 255.255.255.224<br>R3(config-if)#no shutdown<br>R3(config-if)#interface loopback 1<br><br>R3(config-if)#<br>%LINK-5-CHANGED: Interface Loopback1, changed state to up<br><br>%LINEPROTO-5-UPDOWN: Line protocol on Interface Loopback1, changed state to up<br><br>R3(config-if)#ip address 198.133.219.1 255.255.255.0<br>R3(config-if)#no shutdown<br>R3(config-if)#end<br>R3#<br>%SYS-5-CONFIG_I: Configured from console by console<br><br>R3#wr<br>Building configuration...<br>[OK]<br></code></pre></td></tr></table></figure><h3 id="Part-3-配置静态路由">Part 3 配置静态路由</h3><h4 id="Step-1-配置递归静态路由">Step 1 配置递归静态路由</h4><p>以R1为例，执行以下命令：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">R1#configure t<br>Enter configuration commands, one per line.  End with CNTL/Z.<br><br>&lt;!-- IP地址 子网掩码 下一跳IP地址 --&gt;<br>R1(config)#ip route 192.168.1.0 255.255.255.0 10.1.1.2<br></code></pre></td></tr></table></figure><h4 id="Step-2-配置直连静态路由">Step 2 配置直连静态路由</h4><p>以R3为例，执行以下命令：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">R3#conf t<br>Enter configuration commands, one per line.  End with CNTL/Z.<br><br>&lt;!-- IP地址 子网掩码 出口端口名 --&gt;<br>R3(config)#ip route 192.168.0.0 255.255.255.0 s0/0/0<br>%Default route without gateway, if not a point-to-point interface, may impact performance<br></code></pre></td></tr></table></figure><p>此命令只在一个路由器执行即可，因为在简单的点对点连接中，单边配置静态路由即可实现双向通信，这是利用了路由器的直连路由特性和IP通信的对称性原理。</p><h3 id="Part-4-配置缺省路由">Part 4 配置缺省路由</h3><p>以R1为例，执行以下命令</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;!-- 缺省状态下前两个参数都是0.0.0.0 最后一个参数仍是下一跳地址 --&gt;<br>R1(config)#ip route 0.0.0.0 0.0.0.0 10.1.1.2<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">计算机网络实验命令行记录</summary>
    
    
    
    <category term="计算机网络" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="实验" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络实验 配置RIPv2动态网络</title>
    <link href="http://example.com/2025/05/15/note42/"/>
    <id>http://example.com/2025/05/15/note42/</id>
    <published>2025-05-15T08:49:14.000Z</published>
    <updated>2025-06-21T10:04:09.430Z</updated>
    
    <content type="html"><![CDATA[<style>.center {  width: auto;  display: table;  margin-left: auto;  margin-right: auto;}</style><h1>计算机网络实验 配置RIPv2动态网络</h1><h2 id="一、要求文档">一、要求文档</h2><div class="center"><style>.gwixwulckhfg{}</style><img src="/2025/05/15/note42/note42_pic01.jpg" class="gwixwulckhfg"><style>.lldlidnhqyyp{}</style><img src="/2025/05/15/note42/note42_pic02.jpg" class="lldlidnhqyyp"><style>.pqzhikjyrglj{}</style><img src="/2025/05/15/note42/note42_pic03.jpg" class="pqzhikjyrglj"><style>.gvpfjodbigon{}</style><img src="/2025/05/15/note42/note42_pic04.jpg" class="gvpfjodbigon"><style>.hyrupfeasudx{}</style><img src="/2025/05/15/note42/note42_pic05.jpg" class="hyrupfeasudx"><style>.jdsofkgfuobd{}</style><img src="/2025/05/15/note42/note42_pic06.jpg" class="jdsofkgfuobd"><style>.rumgrjcqzgcx{}</style><img src="/2025/05/15/note42/note42_pic07.jpg" class="rumgrjcqzgcx"><style>.sgjsttbvwltl{}</style><img src="/2025/05/15/note42/note42_pic08.jpg" class="sgjsttbvwltl"></div><h2 id="二、实验要点">二、实验要点</h2><p>  想象三个房间（R1、R2、R3），每个房间内的人（PC）只能和本房间的邮差（路由器）说话：</p><ul><li>​当​没有动态路由协议时​​：<br>  R1 邮差不知道 R3 房间有谁，PC-A 的信件无法送达 PC-C。<br>​</li><li>​启用 RIPv2 后​​：<br>  邮差们定期开会交换名单（路由表），R1 和 R3 互相知道对方房间有哪些人，信件顺利传递！</li></ul><p>  <strong>这就是配置RIPv2的作用所在。</strong></p><h2 id="三、命令实现">三、命令实现</h2><h3 id="1-Part-1-基础配置">1. Part 1 基础配置</h3><p><em>注：Step 1和Step 2的过程省略</em></p><h4 id="1）Step-3-配置路由器和交换机地址，以R1为例">1）Step 3 - 配置路由器和交换机地址，以R1为例</h4><p>  在每一个路由器中分别执行以下命令：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;!-- 进入特权模式 --&gt;<br>Router&gt;enable<br>&lt;!-- 进入全局配置模式 --&gt;<br>Router#configure terminal<br><br>&lt;!-- a. 禁用DNS查询 --&gt;<br>&lt;!-- 能够避免输入无效命令时服务器会自动尝试进行域名解析 --&gt;<br>Router(config)#no ip domain-lookup<br><br>&lt;!-- b. 配置设备名称 --&gt;<br>Router(config)#hostname R1<br><br>&lt;!-- c. 将所有明文密码加密 --&gt;<br>R1(config)#service password-encryption<br><br>&lt;!-- d. 将class设置成特权EXEC的密码 --&gt;<br>R1(config)#enable secret class<br><br>&lt;!-- e1. 将cisco设置成线路配置模式的密码 --&gt;<br>R1(config)#line con 0<br>R1(config-line)#password cisco<br>R1(config-line)#login               &lt;!-- 启用密码提示，要求在控制台使用密码进行登录 --&gt;<br>R1(config-line)#logging Synchronous &lt;!-- 启用同步日志 --&gt;<br>R1(config-line)#exit<br><br>&lt;!-- e2. 将cisco设置成虚拟终端线路（VTY）的密码 --&gt;<br>R1(config)#line vty 0 4<br>R1(config-line)#password cisco<br>R1(config-line)#login<br>R1(config-line)#exit<br><br>&lt;!-- f. 设置一个MOTD警告信息 --&gt;<br>R1(config)#banner motd #Unauthorised access is prohibited!#<br><br>&lt;!-- g. 为线路配置模式启用同步日志 --&gt;<br>&lt;!-- 在e1中已经配置完毕 --&gt;<br><br>&lt;!-- h. 为所有接口配置地址表中的IP地址 --&gt;<br>R1(config)#interface g0/1<br>R1(config-if)#ip address 172.30.10.1 255.255.255.0<br>R1(config-if)#description Connection to S1 and PC-A &lt;!-- i. 配置IP地址对应的接口的描述信息 --&gt;<br>R1(config-if)#no shutdown                           &lt;!-- 启用端口 --&gt;<br><br>R1(config-if)#<br>%LINK-5-CHANGED: Interface GigabitEthernet0/1, changed state to up<br><br>%LINEPROTO-5-UPDOWN: Line protocol on Interface GigabitEthernet0/1, changed state to up<br><br>R1(config-if)#exit<br>R1(config)#<br>R1(config)#<br>R1(config)#interface s0/0/0<br>R1(config-if)#ip address 10.1.1.1 255.255.255.252<br>R1(config-if)#description Connection to R2 &lt;!-- i. 配置IP地址对应的接口的描述信息 --&gt;<br>R1(config-if)#clock rate 128000            &lt;!-- j. 为DCE串行接口配置时钟速率 --&gt;<br>R1(config-if)#no shutdown<br><br>%LINK-5-CHANGED: Interface Serial0/0/0, changed state to down<br>R1(config-if)#end<br>R1#<br>%SYS-5-CONFIG_I: Configured from console by console<br><br>R1#wr    &lt;!-- k. 复制run -configuration到startup-configuration --&gt;<br>Building configuration...<br>[OK]<br></code></pre></td></tr></table></figure><p>  完成以上配置之后，路由器之间应该能相互ping通，PC与对应的路由器端口应该能ping通，但PC之间不行。</p><p>  因为此时各个路由器的路由表中只包含了直连网络，但是在没有动态路由协议的情况下路由器之间无法交换信息，因此也就无法找到通往远程网络的路径。</p><blockquote><p>动态路由协议是一种​​自动学习和维护路由表​​的网络协议，允许路由器之间交换路由信息，并根据网络拓扑变化（如链路故障、新增子网）​​动态调整数据转发路径​​，无需管理员手动配置每一条路由。</p></blockquote><h3 id="2-Part-2-RIPv2路由配置">2. Part 2 RIPv2路由配置</h3><h4 id="1）Step-1-配置RIPv2路由，以R1为例">1）Step 1 配置RIPv2路由，以R1为例</h4><p>执行以下命令：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs text">R1&gt;enable<br>Password: <br>R1#configure t<br>Enter configuration commands, one per line.  End with CNTL/Z.<br><br>R1(config)#router rip                 &lt;!-- 选择rip模式 --&gt;<br>R1(config-router)#version 2           &lt;!-- 选择RIPv2 --&gt;<br>R1(config-router)#network 10.1.1.0    &lt;!-- 配置第一个直连网络 --&gt;<br>R1(config-router)#network 172.30.10.0 &lt;!-- 配置另一个直连网络 --&gt;<br>R1(config-router)#no auto-summary     &lt;!-- 关闭自动汇总 --&gt;<br>R1(config-router)#end<br>R1#<br>%SYS-5-CONFIG_I: Configured from console by console<br><br>R1#wr<br>Building configuration...<br>[OK]<br><br>&lt;!-- --------------------------------------------------- --&gt;<br><br>&lt;!-- <br>注：<br>关于直连网络的具体信息，除了直接看拓扑图之外还可以根据命令分析：<br>依旧以R1为例，执行show ip interface brief命令<br><br>R1#show ip interface brief<br>Interface              IP-Address      OK? Method Status                Protocol <br>GigabitEthernet0/0     unassigned      YES unset  administratively down down <br>GigabitEthernet0/1     172.30.10.1     YES manual up                    up <br>Serial0/0/0            10.1.1.1        YES manual up                    up <br>Serial0/0/1            unassigned      YES unset  administratively down down <br>Vlan1                  unassigned      YES unset  administratively down down<br><br>其中出现的打开的几个网络就是直连网络的一个子网，据此可以分析出直连网络的参数。<br> --&gt;<br></code></pre></td></tr></table></figure><h4 id="2）Step-4-配置默认路由">2）Step 4 配置默认路由</h4><p>  在R2当中执行以下命令：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs text">R2#configure t<br>Enter configuration commands, one per line.  End with CNTL/Z.<br><br>R2(config)#ip route 0.0.0.0 0.0.0.0 209.165.201.2  &lt;!-- 配置默认路由，其中最后一个地址是R2的下一跳地址 --&gt;<br>R2(config)#router rip                <br>R2(config-router)#default-information originate    &lt;!-- ​​将默认路由通告给其他运行 RIP 的路由器​​ --&gt;<br>R2(config-router)#end<br>R2#<br>%SYS-5-CONFIG_I: Configured from console by console<br><br>R2#wr<br>Building configuration...<br>[OK]<br></code></pre></td></tr></table></figure><p>  这样一来所有互联网流量就可以通过R2统一转发，便于监控和管理。而其它路由器也无需手动配置默认路由，可以通过RIP自动学习。<br>  此时PC之间也就可以ping通了。</p>]]></content>
    
    
    <summary type="html">计算机网络实验命令行记录</summary>
    
    
    
    <category term="计算机网络" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="实验" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>软件设计师 知识点拾遗 2022年下半年</title>
    <link href="http://example.com/2025/05/14/note41/"/>
    <id>http://example.com/2025/05/14/note41/</id>
    <published>2025-05-14T12:47:20.000Z</published>
    <updated>2025-05-23T07:25:14.478Z</updated>
    
    <content type="html"><![CDATA[<style>.center {  width: auto;  display: table;  margin-left: auto;  margin-right: auto;}</style><h1>软件设计师 知识点拾遗 2022年下半年</h1><p>这次错了25个，略有进步~</p><h2 id="上午题">上午题</h2><div class="center"><style>.jkesplhhxuot{}</style><img src="/2025/05/14/note41/note41_pic01.png" class="jkesplhhxuot"></div><ul><li>DRAM：动态随机存取存储器，它<strong>使用电容存储信息</strong>，但由于电容会自然放电，因此<strong>需要定期刷新来保持数据</strong>。此外，DRAM也是内存的主要介质。</li><li>EPROM：可擦除可编程只读存储器，通过浮栅晶体管存储信息，无需刷新，但需紫外线擦除。</li><li>SRAM：静态随机存取存储器，使用触发器电路存储信息，无需刷新，速度快但成本高。此外，SRAM也是Cache的主要介质。</li><li>EEPROM：电可擦除可编程只读存储器，通过电子擦写存储信息，无需刷新，可逐字节修改。</li></ul><hr><div class="center"><style>.wnafqviwqjex{}</style><img src="/2025/05/14/note41/note41_pic02.png" class="wnafqviwqjex"></div><div class="center"><table><thead><tr><th>算法</th><th>类型</th><th>密钥长度（同等安全）</th><th>主要应用场景</th></tr></thead><tbody><tr><td>RSA</td><td>非对称</td><td>2048+ 位</td><td>HTTPS 证书、数字签名、<strong>X.509</strong></td></tr><tr><td>DES</td><td>对称</td><td>56 位（不安全）</td><td>历史遗留系统</td></tr><tr><td>AES</td><td>对称</td><td>128/192/256 位</td><td>文件加密、通信协议</td></tr><tr><td>ECC</td><td>非对称</td><td>256 位</td><td><strong>SM2 证书</strong>、区块链</td></tr></tbody></table></div><hr><div class="center"><style>.qcdeeiezndhu{}</style><img src="/2025/05/14/note41/note41_pic03.png" class="qcdeeiezndhu"></div><p>  三层C/S结构具体指的是表示层、功能层和数据层，这三层相互独立，可以分模块开发。此外，三层C/S结构聚友语言无关性，即<strong>各层可使用不同的开发语言</strong>，仅需通过接口进行通信。</p><hr><div class="center"><style>.dipjeicdcqwh{}</style><img src="/2025/05/14/note41/note41_pic04.png" class="dipjeicdcqwh"></div><p>  这个题做错的原因还是具体的概念有些记不清了，在这里来回顾一下：</p><ul><li>无直接耦合：两个模块之间没有直接的关系。</li><li>数据耦合：两个模块之间存在值传递。</li><li>标记耦合：两个模块之间存在数据结构的传递。</li><li>控制耦合：一个模块调用另一个模块中的某一功能。</li><li>外部耦合：模块间通过软件之外的环境连接。</li><li>公共耦合：多个模块<strong>共享全局数据</strong>。</li><li>内容耦合：一个模块直接使用另一个模块的内部数据，或者一个模块通过非正常入口转入另一个模块内部。</li></ul><p>  可以再顺便复习一下几种内聚的定义：</p><ul><li>偶然内聚：一个模块内的各个元素之间没有任何联系。</li><li>逻辑内聚：一个模块可以执行若干个逻辑上相似的功能。</li><li>时间内聚：模块中的任务或操作因为​​在同一时间段内执行​​而被组合在一起，但这些操作之间​​没有功能或逻辑上的直接关联​​。</li><li>过程内聚：一个模块能够完成多个任务，且这些任务必须按照指定的过程执行。</li><li>通信内聚：模块内所有的元素都在同一个数据结构上操作。</li><li>顺序内聚：一个模块内的各个处理元素都密切相关于完成一个功能且必须顺序执行。</li><li>功能内聚：一个模块内的所有元素都密切相关于完成一个功能，缺一不可。</li></ul><hr><div class="center"><style>.kohfldunhusn{}</style><img src="/2025/05/14/note41/note41_pic05.png" class="kohfldunhusn"></div><ul><li>冗余：同一数据在表中​​重复存储多次​​，浪费空间且易引发数据不一致。<strong>在本题中同一岗位的薪资会被重复存储。</strong></li><li>插入异常：无法插入某些合法数据，除非同时插入无关数据。<strong>在本题中若新增岗位时暂无教师，则薪资信息无法单独插入。</strong></li><li>删除异常：删除某些数据时，​​意外丢失其他信息​。<strong>在本题中如果删除某岗位的最后一名教师，则对应的薪资信息会丢失。</strong></li></ul><hr><div class="center"><style>.kczhdcwmneed{}</style><img src="/2025/05/14/note41/note41_pic06.png" class="kczhdcwmneed"></div><p>  这题也是记不清了，下面区分一下邻接矩阵和关联矩阵：</p><ul><li>邻接矩阵：设G为n阶图，V={<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">v_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">v_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, …, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">v_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>}，邻接矩阵A(G) = (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">a_{ij}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>)，其中：</li></ul><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>a</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.16em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>l</mi><mtext>，</mtext><msub><mi>v</mi><mi>i</mi></msub><mtext>与</mtext><msub><mi>v</mi><mi>j</mi></msub><mtext>之间的边数</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mtext>，</mtext><msub><mi>v</mi><mi>i</mi></msub><mtext>与</mtext><msub><mi>v</mi><mi>j</mi></msub><mtext>不邻接</mtext></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">a_{ij}=\left\{ \begin{array}{l}l\text{，}v_i\text{与}v_j\text{之间的边数}\\0\text{，}v_i\text{与}v_j\text{不邻接}\\\end{array} \right. </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord text"><span class="mord cjk_fallback">，</span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord text"><span class="mord cjk_fallback">与</span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord text"><span class="mord cjk_fallback">之间的边数</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord text"><span class="mord cjk_fallback">，</span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord text"><span class="mord cjk_fallback">与</span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord text"><span class="mord cjk_fallback">不邻接</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>  不难发现邻接矩阵是n个点之间的关系，故其矩阵的大小为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>。</p><ul><li>关联矩阵：对应的，关联矩阵定义的是一个具有n个点和m条边的图的内容，故其矩阵大小为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>×</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">n×m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>。</li></ul><hr><div class="center"><style>.gnvfelufxkkj{}</style><img src="/2025/05/14/note41/note41_pic07.png" class="gnvfelufxkkj"></div><p>记不清+1…，一棵B-树应该具有以下特点：</p><ul><li><strong>树中的每个结点至多有m颗子树</strong>。</li><li>若根节点不是叶子结点，则至少有两颗子树。</li><li>除根之外的所有非叶子结点至少有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">⌈</mo><mi>m</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">\lceil m/2 \rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span><span class="mord mathnormal">m</span><span class="mord">/2</span><span class="mclose">⌉</span></span></span></span>棵子树。</li><li><strong>所有叶子结点都出现再同一层次上</strong>。</li><li><strong>B-树中的每个结点中的关键字都是有序的</strong>。</li></ul><hr><div class="center"><style>.ziuednohsyvs{}</style><img src="/2025/05/14/note41/note41_pic08.png" class="ziuednohsyvs"></div><div class="center"><style>.sdbiqhpemhts{}</style><img src="/2025/05/14/note41/note41_pic09.png" class="sdbiqhpemhts"></div><hr><div class="center"><style>.rpcsfpyxnkde{}</style><img src="/2025/05/14/note41/note41_pic10.png" class="rpcsfpyxnkde"></div><p>VLAN是在​​二层网络（<strong>数据链路层</strong>）​​中隔离广播域，通过插入​​802.1Q Tag​​标记不同VLAN的帧来实现的。</p>]]></content>
    
    
    <summary type="html">软考真题做题笔记</summary>
    
    
    
    <category term="软考" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/"/>
    
    <category term="软件设计师" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"/>
    
    <category term="知识点拾遗" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%8B%BE%E9%81%97/"/>
    
    
    <category term="软考" scheme="http://example.com/tags/%E8%BD%AF%E8%80%83/"/>
    
  </entry>
  
</feed>
